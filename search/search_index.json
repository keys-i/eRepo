{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Assignments are at:</p>"},{"location":"#year-2","title":"Year 2","text":"<p>DMS</p>"},{"location":"#year-3","title":"Year 3","text":""},{"location":"#coe","title":"COE","text":"<p>Probability and Statistics NP</p>"},{"location":"#enc","title":"ENC","text":"<p>OS</p>"},{"location":"Thapar/Year2/UCS405/","title":"DMS","text":"<ol> <li>Tutorial Sheet 1</li> <li>Tutorial Sheet 2</li> </ol>"},{"location":"Thapar/Year2/UCS405/TutorialSheet1/","title":"Tutorial Sheet 1","text":""},{"location":"Thapar/Year2/UCS405/TutorialSheet2/","title":"Tutorial Sheet 2","text":""},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q1-let-px-qx-rx-and-sx-be-the-statements-x-is-a-duck-x-is-one-of-my-poultry-x-is-an-officer-and-x-is-willing-to-waltz-respectively-express-each-of-these-statements-using-quantifiers-logical-connectives-and-px-px-qx-qx-rx-rx-and-sx-sx","title":"Q1. Let \ud835\udc43(\ud835\udc65), \ud835\udc44(\ud835\udc65), \ud835\udc45(\ud835\udc65), and \ud835\udc46(\ud835\udc65) be the statements \u201c\ud835\udc65 is a duck,\u201d \u201c\ud835\udc65 is one of my poultry,\u201d \u201c\ud835\udc65 is an officer,\u201d and \u201c\ud835\udc65 is willing to waltz,\u201d respectively. Express each of these statements using quantifiers; logical connectives; and  \ud835\udc43(\ud835\udc65) ,  \ud835\udc44(\ud835\udc65) ,  \ud835\udc45(\ud835\udc65) , and  \ud835\udc46(\ud835\udc65) .","text":"<p>a. No ducks are willing to waltz. b. No officers ever decline to waltz. c. All my poultry are ducks. d. My poultry are not officers. e. Does (d) follow from (a), (b), and c? If not, is there a correct conclusion?</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution","title":"Solution:","text":"<p>Given: -  P(x) : \"x is a duck\" -  Q(x) : \"x is one of my poultry\" -  R(x) : \"x is an officer\" -  S(x) : \"x is willing to waltz\"</p> <p>a. No ducks are willing to waltz. This translates: \"For all x, if x is a duck, then x is not willing to waltz.\" $$ \\forall x(P(x) \\rightarrow \\neg S(x)) $$</p> <p>b. No officers ever decline to waltz. This translates: \"For all x, if x is an officer, then x is willing to waltz\" $$ \\forall x(R(x) \\rightarrow S(x)) $$</p> <p>c. All my poultry are ducks. This translates: \"For all x, if x is one of my poultry, then x is a duck.\" $$ \\forall x(Q(x) \\rightarrow P(x)) $$</p> <p>d. My poultry are not officers. This translates: \"For all x, if x is one of my poultry, then x is not an officer.\" $$ \\forall x(Q(x) \\rightarrow \\neg R(x)) $$</p> <p>e. Does (d) follow from (a), (b), and c? If not, is there a correct conclusion? Let's analyze: From (a): \u00a0\u00a0\u00a0  \\forall x(P(x) \\rightarrow \\neg S(x))  (no ducks waltz). From (b): \u00a0\u00a0\u00a0  \\forall x(R(x) \\rightarrow S(x))  (all officers waltz). From c: \u00a0\u00a0\u00a0  \\forall x(Q(x) \\rightarrow P(x))  (all poultry are ducks) We want to see if (d)  \\forall x(Q(x) \\rightarrow \\neg R(x))  follows logically. If all poultry are ducks (from c), and no ducks waltz (from (a)), then none of the poultry waltz. However, if all officers waltz (from (b)), and the poultry do not waltz, this implies that no poultry are officers (because if they were officers, they would have to waltz, which contradicts (a)). Thus, (d) does follow from (a), (b), and c.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q2-let-px-qx-and-rx-be-the-statements-x-is-a-professor-x-is-ignorant-and-x-is-vain-respectively-express-each-of-these-statements-using-quantifiers-logical-connectives-and-px-px-qx-qx-and-rx-rx-where-the-domain-consists-of-all-people","title":"Q2. Let \ud835\udc43(\ud835\udc65), \ud835\udc44(\ud835\udc65), and \ud835\udc45(\ud835\udc65) be the statements \u201c\ud835\udc65 is a professor,\u201d \u201c\ud835\udc65 is ignorant,\u201d and \u201c\ud835\udc65 is vain,\u201d  respectively. Express each of these statements using quantifiers; logical connectives; and  \ud835\udc43(\ud835\udc65) ,  \ud835\udc44(\ud835\udc65) , and  \ud835\udc45(\ud835\udc65) , where the domain consists of all people.","text":"<p>a. No professors are ignorant. b. All ignorant people are vain. c. No professors are vain. d. Does c follow from (a) and (b)? Explain.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_1","title":"Solution:","text":"<p>Given: -  P(x) : \"x is a professor\" -  Q(x) : \"x is ignorant -  R(x) : \"x is x is vain\"</p> <p>a. No professors are ignorant. This translates: \"For all x, if x is a professor, then x is not ignorant.\" $$ \\forall x(P(x) \\rightarrow \\neg Q(x)) $$</p> <p>b. All ignorant people are vain. This translates: \"For all x, if x is ignorant, then x is vain\" $$ \\forall x(Q(x) \\rightarrow R(x)) $$</p> <p>c. No professors are vain. This translates: \"For all x, if x is a professor, then x is not vain.\" $$ \\forall x(P(x) \\rightarrow \\neg R(x)) $$</p> <p>d. Does c follow from (a) and (b)? Explain. Let's analyze: From (a): \u00a0\u00a0\u00a0  \\forall x(P(x) \\rightarrow \\neg Q(x))  (no professors are ignorant). From (b): \u00a0\u00a0\u00a0  \\forall x(Q(x) \\rightarrow R(x))  (ignorant people are vain).</p> <p>We want to see if c  \\forall x(P(x) \\rightarrow \\neg R(x))  follows logically. If no professors are ignorant (from (a)), and only ignorant people are vain (from (b)), we can infer that no professors are vain. Here's the reasoning: - From (a), if someone is a professor, they\u2019re not ignorant ( \\neg Q(x) ). - From (b), we know only ignorant people are vain, so if a professor isn\u2019t ignorant, they can\u2019t be vain.</p> <p>Thus, c does follow from (a), and (b).</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q3-use-rules-of-inference-to-show-that-the-hypotheses-if-it-does-not-rain-or-if-it-is-not-foggy-then-the-sailing-race-will-be-held-and-the-lifesaving-demonstration-will-go-on-if-the-sailing-race-is-held-then-the-trop-hy-will-be-awarded-and-the-trophy-was-not-awarded-imply-the-conclusion-it-rained","title":"Q3. Use rules of inference to show that the hypotheses \u201cIf it does not rain or if it is not foggy, then the sailing race will be held and the lifesaving demonstration will go on,\u201d \u201cIf the sailing race is held, then the trop hy will be awarded,\u201d and \u201cThe trophy was not awarded\u201d imply the conclusion \u201cIt rained.\u201d","text":""},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_2","title":"Solution:","text":"<p>Let's break down the problem step by step using the rules of inference to show that the given hypotheses imply the conclusion \"It rained.\"</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#step-1-label-the-statements","title":"Step 1: Label the statements","text":"<ul> <li>Let R represent \"It rains.\"</li> <li>Let F represent \"It is foggy.\"</li> <li>Let S represent \"The sailing race is held.\"</li> <li>Let L represent \"The lifesaving demonstration will go on.\"</li> <li>Let T represent \"The trophy is awarded.\"</li> </ul>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#step-2-translate-the-hypotheses-into-logical-statements","title":"Step 2: Translate the hypotheses into logical statements","text":"<ol> <li> <p>\"If it does not rain or if it is not foggy, then the sailing race will be held and the lifesaving demonstration will go on.\"    This can be written as:     (\\neg R \\lor \\neg F) \\rightarrow (S \\land L) </p> </li> <li> <p>\"If the sailing race is held, then the trophy will be awarded.\"    This is:     S \\rightarrow T </p> </li> <li> <p>\"The trophy was not awarded.\"    This is:     \\neg T </p> </li> </ol>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#step-3-use-the-rules-of-inference","title":"Step 3: Use the rules of inference","text":"<p>We are given the goal of proving that it rained, i.e., proving  R .</p> <ol> <li> <p>From statement 3, we know that  \\neg T  (the trophy was not awarded).</p> </li> <li> <p>Using Modus Tollens on statement 2 (since  S \\rightarrow T  and  \\neg T ), we can conclude:    [    \\neg S    ]    (The sailing race was not held.)</p> </li> <li> <p>Now, use Modus Tollens again on statement 1,  (\\neg R \\lor \\neg F) \\rightarrow (S \\land L) , combined with  \\neg S . Since the sailing race was not held ( \\neg S ), it means that  \\neg R \\lor \\neg F  must be false for the implication to hold true. For  \\neg R \\lor \\neg F  to be false, both  \\neg R  and  \\neg F  must be false. This means:    [    R \\land F    ]    (It rained, and it was foggy.)</p> </li> </ol>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#conclusion","title":"Conclusion:","text":"<p>From this reasoning, we have shown that the hypotheses logically imply that it rained. So the conclusion \"It rained\" ( R ) follows from the given premises using the rules of inference.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q4-consider","title":"Q4. Consider","text":"<p>Premises: If Claghorn has wide support, then he'll be asked to run for the senate. If Claghorn yells \"Eureka\" in Iowa, he will not be asked to run for the senate. Claghorn yells \"Eureka\" in Iowa. Conclusion: Claghorn does not have wide support. Determine whether the conclusion follows logically from the premises. Explain by representing the statements symbolically and using rules of inference.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_3","title":"Solution:","text":"<p>Let's break this down step by step to see if the conclusion logically follows from the premises. We'll represent the statements symbolically and apply the rules of inference to make everything clear.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#step-1-define-the-statements","title":"Step 1: Define the statements","text":"<ul> <li>Let W represent \"Claghorn has wide support.\"</li> <li>Let S represent \"Claghorn will be asked to run for the senate.\"</li> <li>Let E represent \"Claghorn yells 'Eureka' in Iowa.\"</li> </ul>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#step-2-translate-the-premises-into-symbolic-form","title":"Step 2: Translate the premises into symbolic form","text":"<ol> <li> <p>\"If Claghorn has wide support, then he'll be asked to run for the senate.\"    Symbolically:     W \\rightarrow S </p> </li> <li> <p>\"If Claghorn yells 'Eureka' in Iowa, he will not be asked to run for the senate.\"    Symbolically:     E \\rightarrow \\neg S </p> </li> <li> <p>\"Claghorn yells 'Eureka' in Iowa.\"    Symbolically:     E </p> </li> </ol>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#step-3-apply-the-rules-of-inference","title":"Step 3: Apply the rules of inference","text":"<p>We need to determine if the conclusion \"Claghorn does not have wide support\" (i.e.,  \\neg W ) follows logically from these premises.</p> <ol> <li> <p>From premise 3, we know that  E  is true (Claghorn yells \"Eureka\" in Iowa).</p> </li> <li> <p>Using Modus Ponens on premise 2 and  E , we can conclude  \\neg S  (Claghorn will not be asked to run for the senate).</p> </li> <li> <p>Now, look at premise 1:  W \\rightarrow S  (If Claghorn has wide support, then he'll be asked to run for the senate). We know that  S  is false because we just concluded  \\neg S .</p> </li> <li> <p>Using Modus Tollens on premise 1 and  \\neg S , we can conclude  \\neg W  (Claghorn does not have wide support).</p> </li> </ol>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#conclusion_1","title":"Conclusion:","text":"<p>Yes, the conclusion \"Claghorn does not have wide support\" ( \\neg W ) follows logically from the premises. By representing the statements symbolically and using the rules of inference (specifically Modus Ponens and Modus Tollens), we\u2019ve shown that the conclusion is valid.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q5-consider-the-following-open-propositions-over-the-universe-u","title":"Q5. Consider the following open propositions over the universe \ud835\udc48 =","text":"<p> \ud835\udc43(\ud835\udc65): \ud835\udc65 \u2265 4   \ud835\udc44(\ud835\udc65): \ud835\udc652 = 25   \ud835\udc45(\ud835\udc65): \ud835\udc60  is a multiple of  2  Find the truth values of a.  \ud835\udc43(\ud835\udc65) \\bigwedge \ud835\udc45(\ud835\udc65) b.  [\\neg\ud835\udc44(\ud835\udc65)] \\bigwedge \ud835\udc43(\ud835\udc65)  Let's work through this problem step by step, starting with the truth values for the given propositions.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_4","title":"Solution:","text":""},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#universe-u-4-2-0-1-3-5-6-8-10-u-4-2-0-1-3-5-6-8-10","title":"Universe  U = \\{ -4, -2, 0, 1, 3, 5, 6, 8, 10 \\}","text":"<p>We are given three propositions: -  P(x): x \\geq 4  -  Q(x): x^2 = 25  -  R(x): x  is a multiple of 2</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#a-px-land-rx-px-land-rx","title":"a.  P(x) \\land R(x)","text":"<p>We need to find the truth value of  P(x) \\land R(x) , which means  x \\geq 4  and  x  is a multiple of 2.</p> <p>Go through each element in  U : -  x = -4 :  P(x)  is false (since  -4 \\not\\geq 4 ), so  P(x) \\land R(x)  is false. -  x = -2 :  P(x)  is false, so  P(x) \\land R(x)  is false. -  x = 0 :  P(x)  is false, so  P(x) \\land R(x)  is false. -  x = 1 :  P(x)  is false, so  P(x) \\land R(x)  is false. -  x = 3 :  P(x)  is false, so  P(x) \\land R(x)  is false. -  x = 5 :  P(x)  is true (since  5 \\geq 4 ), but  R(x)  is false (since 5 is not a multiple of 2), so  P(x) \\land R(x)  is false. -  x = 6 :  P(x)  is true and  R(x)  is true, so  P(x) \\land R(x)  is true. -  x = 8 :  P(x)  is true and  R(x)  is true, so  P(x) \\land R(x)  is true. -  x = 10 :  P(x)  is true and  R(x)  is true, so  P(x) \\land R(x)  is true.</p> <p>Truth values of  P(x) \\land R(x) : True for  x = 6, 8, 10 .</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#b-neg-qx-land-px-neg-qx-land-px","title":"b.  \\neg Q(x) \\land P(x)","text":"<p>Now let's find the truth value of  \\neg Q(x) \\land P(x) , meaning  x^2 \\neq 25  and  x \\geq 4 .</p> <p>Check each element in  U : -  x = -4 :  Q(x)  is false (since  (-4)^2 \\neq 25 ), and  P(x)  is false, so  \\neg Q(x) \\land P(x)  is false. -  x = -2 :  Q(x)  is false and  P(x)  is false, so  \\neg Q(x) \\land P(x)  is false. -  x = 0 :  Q(x)  is false and  P(x)  is false, so  \\neg Q(x) \\land P(x)  is false. -  x = 1 :  Q(x)  is false and  P(x)  is false, so  \\neg Q(x) \\land P(x)  is false. -  x = 3 :  Q(x)  is false and  P(x)  is false, so  \\neg Q(x) \\land P(x)  is false. -  x = 5 :  Q(x)  is true (since  5^2 = 25 ), so  \\neg Q(x) \\land P(x)  is false. -  x = 6 :  Q(x)  is false and  P(x)  is true, so  \\neg Q(x) \\land P(x)  is true. -  x = 8 :  Q(x)  is false and  P(x)  is true, so  \\neg Q(x) \\land P(x)  is true. -  x = 10 :  Q(x)  is false and  P(x)  is true, so  \\neg Q(x) \\land P(x)  is true.</p> <p>Truth values of  \\neg Q(x) \\land P(x) : True for  x = 6, 8, 10 .</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q6-express-each-of-these-sentences-into-logical-expression-using-predicates-quantifiers-and-logical-connectives","title":"Q6. Express each of these sentences into logical expression using predicates, quantifiers, and logical connectives.","text":"<p>a. No one is perfect. b. Not everyone is perfect. c. All your friends are perfect. d. At least one of your friends is perfect. e. Everyone is your friend and is perfect. f. Not everybody is your friend or someone is not perfect. g. At least one mail message, among the nonempty set of messages, can be saved if there. is a disk with more than 10 kilobytes of free space. h. Whenever there is an active alert , all queued messages are transmitted. i. The diagnostic monitor tracks the status of all systems except the main console. j. Each participant on the conference call whom the host.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_5","title":"Solution:","text":"<p>Let\u2019s turn these sentences into logical expressions using predicates, quantifiers, and logical connectives, while keeping it clear and understandable.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#a-no-one-is-perfect","title":"a. No one is perfect.","text":"<p>Let  P(x)  represent \u201c x  is perfect,\u201d and the domain be all people. This can be written as: [ \\forall x \\, \\neg P(x) ] This means: \"For all  x ,  x  is not perfect.\"</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#b-not-everyone-is-perfect","title":"b. Not everyone is perfect.","text":"<p>Again, using  P(x)  to represent \u201c x  is perfect,\u201d this can be written as: [ \\neg \\forall x \\, P(x) ] Or equivalently: [ \\exists x \\, \\neg P(x) ] This means: \"There exists at least one person who is not perfect.\"</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#c-all-your-friends-are-perfect","title":"c. All your friends are perfect.","text":"<p>Let  F(x)  represent \u201c x  is your friend,\u201d and  P(x)  represent \u201c x  is perfect.\u201d This can be written as: [ \\forall x \\, (F(x) \\rightarrow P(x)) ] This means: \"For every  x , if  x  is your friend, then  x  is perfect.\"</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#d-at-least-one-of-your-friends-is-perfect","title":"d. At least one of your friends is perfect.","text":"<p>This can be written as: [ \\exists x \\, (F(x) \\land P(x)) ] This means: \"There exists at least one  x  such that  x  is your friend and  x  is perfect.\"</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#e-everyone-is-your-friend-and-is-perfect","title":"e. Everyone is your friend and is perfect.","text":"<p>This can be written as: [ \\forall x \\, (F(x) \\land P(x)) ] This means: \"For all  x ,  x  is your friend and  x  is perfect.\"</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#f-not-everybody-is-your-friend-or-someone-is-not-perfect","title":"f. Not everybody is your friend or someone is not perfect.","text":"<p>This can be written as: [ \\neg \\forall x \\, F(x) \\lor \\exists x \\, \\neg P(x) ] This means: \"Not everyone is your friend, or there is at least one person who is not perfect.\"</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#g-at-least-one-mail-message-among-the-nonempty-set-of-messages-can-be-saved-if-there-is-a-disk-with-more-than-10-kilobytes-of-free-space","title":"g. At least one mail message, among the nonempty set of messages, can be saved if there is a disk with more than 10 kilobytes of free space.","text":"<p>Let  M(x)  represent \u201c x  is a mail message,\u201d  S(x)  represent \u201c x  can be saved,\u201d and  D(y)  represent \u201cDisk  y  has more than 10 kilobytes of free space.\u201d This can be written as: [ \\exists x \\, (M(x) \\land \\exists y \\, D(y) \\rightarrow S(x)) ] This means: \"There exists at least one mail message that can be saved if there is a disk with more than 10 kilobytes of free space.\"</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#h-whenever-there-is-an-active-alert-all-queued-messages-are-transmitted","title":"h. Whenever there is an active alert, all queued messages are transmitted.","text":"<p>Let  A  represent \u201cThere is an active alert,\u201d and  Q(x)  represent \u201c x  is a queued message,\u201d and  T(x)  represent \u201c x  is transmitted.\u201d This can be written as: [ A \\rightarrow \\forall x \\, (Q(x) \\rightarrow T(x)) ] This means: \"If there is an active alert, then for all  x , if  x  is a queued message, then  x  is transmitted.\"</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#i-the-diagnostic-monitor-tracks-the-status-of-all-systems-except-the-main-console","title":"i. The diagnostic monitor tracks the status of all systems except the main console.","text":"<p>Let  D  represent \u201cThe diagnostic monitor tracks the status,\u201d  S(x)  represent \u201c x  is a system,\u201d and  M  represent \u201cthe main console.\u201d This can be written as: [ \\forall x \\, (S(x) \\land x \\neq M \\rightarrow D(x)) ] This means: \"For all systems  x , if  x  is not the main console, the diagnostic monitor tracks  x .\"</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#j-each-participant-on-the-conference-call-whom-the-host-invites-can-speak","title":"j. Each participant on the conference call whom the host invites can speak.","text":"<p>Let  P(x)  represent \u201c x  is a participant,\u201d  H(x)  represent \u201cThe host invites  x ,\u201d and  S(x)  represent \u201c x  can speak.\u201d This can be written as: [ \\forall x \\, (P(x) \\land H(x) \\rightarrow S(x)) ] This means: \"For every participant  x , if the host invites  x , then  x  can speak.\"</p> <p>These translations express the meaning of each statement using logical symbols in a clear way, perfect for reasoning with predicates, quantifiers, and connectives.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q7-let-d_x-n-d_x-n-and-d_y-n0-d_y-n0-define-px-y-px-y-as-x-divides-y","title":"Q7. Let  \ud835\udc37_{\ud835\udc65} = \ud835\udc41  and  \ud835\udc37_{\ud835\udc66} = \ud835\udc41^0 . Define  \ud835\udc43(\ud835\udc65, \ud835\udc66)  as \u201c\ud835\udc65 divides \ud835\udc66\".","text":"<p>Find the truth values along with proper reasons for the following quantified predicates: i.  \\forall \ud835\udc65 \\hspace{0.2cm} \ud835\udc43(\ud835\udc65, 0)  ii.  \\forall \ud835\udc65 \\hspace{0.2cm} \ud835\udc43(\ud835\udc65, \ud835\udc65)  iii.  \\forall \ud835\udc66 \\hspace{0.2cm} \\exists \ud835\udc65 \\hspace{0.2cm} \ud835\udc43(\ud835\udc65, \ud835\udc66)  iv.  \\exists \ud835\udc66 \\hspace{0.2cm} \\forall \ud835\udc65 \\hspace{0.2cm} \ud835\udc43(\ud835\udc65, \ud835\udc66)  v.  \\forall \ud835\udc65 \\hspace{0.2cm} \\forall \ud835\udc66 \\hspace{0.2cm} [(\ud835\udc43(\ud835\udc65, \ud835\udc66) \\bigwedge \ud835\udc43(\ud835\udc66, \ud835\udc65)) \\rightarrow (\ud835\udc65 = \ud835\udc66)]  vi.  \\forall \ud835\udc65 \\hspace{0.2cm} \\forall \ud835\udc66 \\hspace{0.2cm} \\forall \ud835\udc65 \\hspace{0.2cm} [(\ud835\udc43(\ud835\udc65, \ud835\udc66) \\bigwedge \ud835\udc43(\ud835\udc66, \ud835\udc65)) \\rightarrow \ud835\udc43(\ud835\udc65, \ud835\udc67)] </p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_6","title":"Solution:","text":"<p>Let\u2019s evaluate the truth values of these quantified predicates step by step using clear reasoning.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#i-forall-x-px-0-forall-x-px-0","title":"i.  \\forall x \\, P(x, 0)","text":"<p>This is asking whether every  x  divides 0. By definition, every integer divides 0 because  0 = x \\times 0  for any  x , so this statement is true.</p> <p>Reason: For all integers  x ,  x  divides 0, since  0 \\div x = 0 .</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#ii-forall-x-px-x-forall-x-px-x","title":"ii.  \\forall x \\, P(x, x)","text":"<p>This is asking whether every  x  divides itself. Clearly, any integer divides itself because  x \\div x = 1 . Therefore, this statement is true.</p> <p>Reason: For any  x ,  x \\div x = 1 , so every  x  divides itself.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#iii-forall-y-exists-x-px-y-forall-y-exists-x-px-y","title":"iii.  \\forall y \\, \\exists x \\, P(x, y)","text":"<p>This is asking if, for every  y , there exists an  x  such that  x  divides  y . This is true because for every integer  y ,  x = 1  divides  y .</p> <p>Reason:  x = 1  divides every integer  y , so there exists at least one  x  (which is 1) that divides any  y .</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#iv-exists-y-forall-x-px-y-exists-y-forall-x-px-y","title":"iv.  \\exists y \\, \\forall x \\, P(x, y)","text":"<p>This asks if there is some  y  such that all  x  divide  y . This is true, since 0 is such a  y  \u2014 all integers divide 0.</p> <p>Reason:  y = 0  works because, as established earlier, every integer  x  divides 0.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#v-forall-x-forall-y-px-y-land-py-x-rightarrow-x-y-forall-x-forall-y-px-y-land-py-x-rightarrow-x-y","title":"v.  \\forall x \\, \\forall y \\, [(P(x, y) \\land P(y, x)) \\rightarrow (x = y)]","text":"<p>This is asking if  x  divides  y  and  y  divides  x , does it imply  x = y ? This is true, because if two integers divide each other, they must be equal (e.g., if 4 divides 4, then 4 and 4 are the same).</p> <p>Reason: If  x  divides  y  and  y  divides  x , it\u2019s only possible when  x = y .</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#vi-forall-x-forall-y-forall-z-px-y-land-py-z-rightarrow-px-z-forall-x-forall-y-forall-z-px-y-land-py-z-rightarrow-px-z","title":"vi.  \\forall x \\, \\forall y \\, \\forall z \\, [(P(x, y) \\land P(y, z)) \\rightarrow P(x, z)]","text":"<p>This is the transitive property of divisibility: if  x  divides  y , and  y  divides  z , then  x  must divide  z . This is true because divisibility is transitive.</p> <p>Reason: If  x  divides  y , and  y  divides  z , then  x  divides  z . For example, if 2 divides 4, and 4 divides 8, then 2 divides 8.</p> <p>These evaluations show how each logical expression holds based on the properties of divisibility within the set of integers.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q8-identify-the-error-or-errors-in-this-argument-that-supposedly-shows-that-if-forall-x-px-bigvee-qx-forall-x-px-bigvee-qx-is-true-then-forall-x-px-bigvee-forall-x-qx-forall-x-px-bigvee-forall-x-qx-is-true","title":"Q8. Identify the error or errors in this argument that supposedly shows that if  \\forall \ud835\udc65 (\ud835\udc43(\ud835\udc65) \\bigvee \ud835\udc44(\ud835\udc65))  is true then  \\forall \ud835\udc65 \ud835\udc43(\ud835\udc65) \\bigvee \\forall \ud835\udc65 \ud835\udc44(\ud835\udc65)  is true.","text":"<p>a.  \\forall x \\hspace{0.2cm} (P(x) \\bigvee Q(x))  Premise b.  P\\(c \\bigvee Qc ) Universal instantiation from (a) c.  P\\(c ) Simplification from (b) d.  \\forall x \\hspace{0.2cm} P(x)  Universal generalization from c e.  Q\\(c ) Simplification from (b) f.  \\forall x \\hspace{0.2cm} Q(x)  Universal generalization from (e) g.  \\forall x \\hspace{0.2cm} (P(x) \\bigvee Q(x))  Conjunction from (d) and (f)</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_7","title":"Solution:","text":"<p>To understand why this argument doesn't work, let's break it down and identify the errors step by step:</p> <ol> <li>Premise:  \\forall x \\, (P(x) \\vee Q(x))  states that for every x, either P(x) or Q(x) is true. So far, everything seems fine.</li> <li>Universal Instantiation: From the premise, we instantiate with a specific c, so we get  P\\(c \\vee Qc ). This also holds since it's derived from the original universal statement.</li> <li>Simplification: Here's where things start to get tricky. The argument jumps to assuming P\\(c) (and later Q\\(c)) without justification. But all we know is that either P\\(c) is true, or Q\\(c) is true. You can't claim one or the other without further information. So, the error here is in assuming one part of the disjunction without ruling out the other.</li> <li>Universal Generalization: Moving from P\\(c) to  \\forall x \\, P(x)  is a mistake. Just because something holds for one instance c, you can't generalize it to all x. This step violates the rules of universal generalization, which requires showing that P(x) holds for all x, not just one case.</li> <li>Conjunction: Finally, the argument combines  \\forall x \\, P(x)  and  \\forall x \\, Q(x) , but neither of these are valid conclusions from the earlier steps. So, the whole argument falls apart here.</li> </ol>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#in-summary","title":"In summary:","text":"<p>The errors are in assuming individual parts of a disjunction and incorrectly generalizing from specific instances to universal statements. This mix-up leads to the false conclusion that  \\forall x P(x) \\vee \\forall x Q(x)  follows from  \\forall x (P(x) \\vee Q(x)) .</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q9-let-k-k-be-a-positive-integer-show-that-1k-2k-3k-dots-nk-1k-2k-3k-dots-nk-is-onk1-onk1","title":"Q9. Let  k  be a positive integer. Show that  1^k + 2^k + 3^k + \\dots + n^k  is  O(n^{k+1}) .","text":""},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_8","title":"Solution:","text":"<p>Step 1: Expressing the Sum The Sum  S(n)  can be written as: $$ S(n) = \\sum_{i=1}^{n} i^k = 1^k + 2^k + 3^k + \\dots + n^k $$ We want to show this sum grows asymptotically as  O(n^{k+1}) .  Step 2: Estimating the Sum To estimate the  S(n) , we can compare it with an integral. The function  f(x) = x^k  increases as x increases, so: $$ \\int_{1}^{n} x^k dx \\hspace{0.2 cm} and \\int_{0}^{n} x^k dx $$ will provide good bounds for the sum. 1. Lower bound: $$ \\int_{1}^{n} x^k dx = \\frac{n^{k+1}}{k+1} - \\frac{1^{k+1}}{k+1} = \\frac{n^{k+1}}{k+1} - \\frac{1}{k+1} $$</p> <p>2. Upper bound: $$ \\int_{0}^{n} x^k dx = \\frac{n^{k+1}}{k+1} $$</p> <p>Thus, the sum  S(n)  is squeezed between two expressions that are propotional to  n^{k+1} </p> <p>Step 3: Asymptotic Growth Since the sum  S(n)  is bounded by integrals that are both propotional to  n^{k+1}, we conclude that  S(n)  grows asymptotically like n^{k+1}. More formally: $$ S(n) = O(n^{k+1}) $$</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q10-prove-that-if-n-is-an-integer-and-3n-2-is-even-then-n-is-even-using","title":"Q10. Prove that if n is an integer and 3n + 2 is even, then n is even using","text":"<p>a. proof by contraposition. b. proof by contradiction.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_9","title":"Solution:","text":""},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#a-proof-by-contraposition","title":"a. Proof by Contraposition","text":"<p>To prove that if 3n+2 is even, then  n  is even, we use proof by contraposition. In this method, we prove the contrapositive of the given statement:</p> <p>If  n  is odd, then 3n+2 is odd.</p> <p>Proof: 1. Assume  n  is odd. By definition of odd integers, we can write  n=2k+1 , where  k  is an integer. 2. Now, consider  3n+2 : $$ 3n+2 = 3 (2k + 1) + 2 = 6k + 3 + 2 = 6k + 5 $$ \u00a0\u00a0\u00a0\u00a0 Since  6k + 5 = 2(3k+2) + 1 , this expression is odd (because it is of the form  2m+1 )  \u00a0\u00a0\u00a0\u00a0 for some integer  m . 3. Thus, if  n  is odd,  3n+2  is odd, which proves the contrapositive.</p> <p>Since the contrapositive is true, the original statement is also true: If  3n+2  is even, then  n  is even.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#b-proof-by-contradiction","title":"b. Proof by Contradiction","text":"<p>To prove that if 3n+2 is even, then  n  is even, we use proof by contradiction. we assume the opposite of what we want to prove and show that it leads to a contradiction.</p> <p>Proof: 1. Assume  3n+2  is even but n is odd. 2. Since n is odd, we can write  n = 2k+1  for some integer  k . 3. Substitute  n = 2k+1  into the expression  3n+2 : $$ 3n+2 = 3 (2k + 1) + 2 = 6k + 3 + 2 = 6k + 5 $$ \u00a0\u00a0\u00a0\u00a0 As shown earlier that  6k + 5  4. This contradicts our assumption that  3n+2  is even. 5. Therefore, our assumption that  n  is odd must be false. Hence,  n  must be even. Thus, by contradiciton, if  3n+2  is even,  n  is even.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q11-proof-by-contrapositive-that-for-every-real-number-x-0-2-we-have-sin-x-cos-x-1","title":"Q11. Proof by contrapositive that for every real number \ud835\udc65 \ud835\udf16 [0, \ud835\udf0b/2], we have sin \ud835\udc65 + cos \ud835\udc65 \u2265 1.","text":""},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_10","title":"Solution:","text":"<p>To prove that for any  x \\in [0, \\pi/2] ,  \\sin x + \\cos x \\geq 1  using the contrapositive, let's take a more straightforward approach.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#original-statement","title":"Original statement:","text":"<p>For every real number  x \\in [0, \\pi/2] ,  \\sin x + \\cos x \\geq 1 .</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#contrapositive","title":"Contrapositive:","text":"<p>The contrapositive of this statement is: If  \\sin x + \\cos x &lt; 1 , then  x \\notin [0, \\pi/2] .</p> <p>Now, let\u2019s prove this.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#step-1-start-by-assuming-the-contrapositive","title":"Step 1: Start by assuming the contrapositive","text":"<p>Assume that  \\sin x + \\cos x &lt; 1 . What we need to show is that this implies  x  cannot be in the interval  [0, \\pi/2] .</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#step-2-examine-the-sum-of-sine-and-cosine","title":"Step 2: Examine the sum of sine and cosine","text":"<p>We know that in the interval  [0, \\pi/2] : - At  x = 0 ,  \\sin 0 = 0  and  \\cos 0 = 1 , so  \\sin 0 + \\cos 0 = 1 . - At  x = \\pi/2 ,  \\sin \\pi/2 = 1  and  \\cos \\pi/2 = 0 , so  \\sin \\pi/2 + \\cos \\pi/2 = 1 .</p> <p>For any  x  in between, the sum  \\sin x + \\cos x  is always at least 1. This makes sense because both sine and cosine are positive within this interval, and their squares sum to 1 (thanks to the Pythagorean identity:  \\sin^2 x + \\cos^2 x = 1 ).</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#step-3-conclusion","title":"Step 3: Conclusion","text":"<p>If  \\sin x + \\cos x &lt; 1 , then  x  can't be in  [0, \\pi/2] , because we've shown that within this range, the sum of sine and cosine is always at least 1. So,  x  must be outside of  [0, \\pi/2] .</p> <p>By proving the contrapositive, we\u2019ve effectively shown that for every  x \\in [0, \\pi/2] ,  \\sin x + \\cos x \\geq 1 , which is what we set out to prove.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q12-what-is-wrong-with-the-following-proof-explain-your-answer-with-a-valid-explanation","title":"Q12. What is wrong with the following proof? Explain your answer with a valid explanation.","text":"<p>Prove that the statement  \\sqrt{2} + \\sqrt{6} &lt; \\sqrt{15}  is true. \u201cProof\u201d: Step 1.  \\sqrt{2} + \\sqrt{6} &lt; \\sqrt{15}  Step 2.  (\\sqrt{2} + \u221a6)^2 &lt; 15  Step 3.  \\sqrt{8} + 2\\sqrt{12} &lt; 15  Step 4.  2\\sqrt{12} &lt; 7  Step 5.  48 &lt; 49 </p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_11","title":"Solution:","text":"<p>The error in the proof happens in Step 3, where there's a misunderstanding of how to handle squared terms. Let's break it down in a way that\u2019s easy to follow:</p> <ol> <li> <p>Step 1: You're asked to prove  \\sqrt{2} + \\sqrt{6} &lt; \\sqrt{15} .</p> </li> <li> <p>Step 2: Squaring both sides to simplify things is okay. So, the inequality becomes:    (\\sqrt{2} + \\sqrt{6})^2 &lt; (\\sqrt{15})^2    Expanding the left side gives:    2 + 6 + 2\\sqrt{2 \\times 6} = 8 + 2\\sqrt{12}    Now, the inequality is:    8 + 2\\sqrt{12} &lt; 15</p> </li> <li> <p>Step 3: Here's where the mistake happens. The proof wrongly changes  8  into  \\sqrt{8} , which isn\u2019t allowed. So, instead of  \\sqrt{8} + 2\\sqrt{12} , it should have stayed as  8 + 2\\sqrt{12} .</p> </li> <li> <p>Step 4: From the correct form  8 + 2\\sqrt{12} &lt; 15 , we can move the 8 over:    2\\sqrt{12} &lt; 7    Dividing both sides by 2 gives:    \\sqrt{12} &lt; 3.5    Squaring both sides results in:    12 &lt; 12.25    Which is true, confirming the original statement.</p> </li> </ol> <p>So, the key issue is in Step 3, where the proof incorrectly simplifies  8  as  \\sqrt{8} , leading to a wrong direction. Otherwise, the inequality holds true.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#q13-derive-the-formula-for-the-following-expression","title":"Q13. Derive the formula for the following expression:","text":"<p>$$ \\frac{1}{2} + \\frac{1}{4} + \\frac{1}{8} + \\cdot\\cdot\\cdot + \\frac{1}{2^n} $$ Also prove the validity of your formula using mathematical induction.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#solution_12","title":"Solution:","text":""},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#derivation-of-the-formula","title":"Derivation of the formula","text":"\\frac{1}{2} + \\frac{1}{4} + \\frac{1}{8} + \\cdot\\cdot\\cdot + \\frac{1}{2^n}  <p>This is a geometric series where the first term  a=\\frac{1}{2}  and the common ratio  r=\\frac{1}{2} . The sum of the first  n  terms of a geometric series is given by the formula: $$ S_{n} = a \\frac{1-r^n}{1-r} $$ Substitute the values of  a = \\frac{1}{2}  and  r = \\frac{1}{2}  into the formula: $$ S_{n} = \\frac{1}{2} \\cdot \\frac{1-(\\frac{1}{2})^n}{1-\\frac{1}{2}} = \\frac{1}{2} \\cdot \\frac{1-\\frac{1}{2^n}}{\\frac{1}{2}} = 1-\\frac{1}{2^n} $$ Thus, the formula for the sum of the series is: $$ S_{n} = 1-\\frac{1}{2^n} $$</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#proof-by-mathematical-induction","title":"Proof by Mathematical Induction","text":"<p>We will now prove the formula  S_{n} = 1-\\frac{1}{2^n}  using mathematical induction.</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#best-case-n1","title":"Best Case (n=1):","text":"<p>When  n=1 , the sum of the series is: $$ S_{1} = \\frac{1}{2}$$ Using the formula for  n = 1 : $$ S_{1} = 1-\\frac{1}{2^1} = 1-\\frac{1}{2} = \\frac{1}{2}$$ Thus, the formula holds for  n=1 .</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#inductive-step","title":"Inductive Step:","text":"<p>Assume the formula is true for  n = k , i.e., $$ S_{k} = 1 - \\frac{1}{2^k} $$ We need to prove that the formula holds for  n = k+1 , i.e., $$ S_{k+1} = 1 - \\frac{1}{2^{k+1}} $$ From the Assumption, the sum up to  n = k  is: $$ S_{k} = 1 - \\frac{1}{2^k} $$ To find  S_{k+1} , we add the next term  \\frac{1}{2^{k+1}}  to  S_{k} : $$ S_{k+1} = S_{k} + \\frac{1}{2^{k+1}} = \\left( 1 - \\frac{1}{2^k} \\right) + \\frac{1}{2^{k+1}} $$ Simplifying the right-hand side: $$ S_{k+1} = 1 - \\frac{1}{2^k} + \\frac{1}{2^{k+1}} = 1 - \\frac{1}{2^k} \\left( 1 - \\frac{1}{2} \\right) $$ $$ S_{k+1} = 1 - \\frac{1}{2^k}\\cdot \\frac{1}{2} = 1 - \\frac{1}{2^{k+1}} $$ Thus, the formula holds for  n = k+1 .</p>"},{"location":"Thapar/Year2/UCS405/TutorialSheet2/#conclusion_2","title":"Conclusion:","text":"<p>By the principle of mathematical induction, the formula  S_n = 1 - \\frac{1}{2^n}  is valid for all  n \\geq 1 .</p>"},{"location":"Thapar/Year3/COE/UCS410/","title":"Probability","text":"<ol> <li>Assignment 1</li> <li>Assignment 2</li> <li>Assignment 3</li> <li>Assignment 4</li> <li>Assignment 5</li> <li>Assignment 6</li> <li>Assignment 7</li> <li>Assignment 8</li> </ol>"},{"location":"Thapar/Year3/COE/UCS410/Assignment1/","title":"Assignment 1","text":""},{"location":"Thapar/Year3/COE/UCS410/Assignment1/#q1-create-a-vector-c-5-10-15-20-25-30-and-write-a-program-which-returns-the-maximum-and-minimum-of-this-vector","title":"Q1. Create a vector c = [5, 10, 15, 20, 25, 30] and write a program which returns the maximum and minimum of this vector.","text":"<pre><code>c = c(5, 10, 15, 20, 25, 30)\n\nmax_c = max(c)\nmin_c = min(c)\n\ncat(\"1.\\n\")\ncat(\"Maximum value of c is:\", max_c, \"\\n\")\ncat(\"Minimum value of c is:\", min_c, \"\\n\")\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment1/#q2-write-a-program-in-r-to-find-factorial-of-a-number-by-taking-input-from-user-please-print-error-message-if-the-input-number-is-negative","title":"Q2. Write a program in R to find factorial of a number by taking input from user. Please print error message if the input number is negative.","text":"<pre><code>factorial_c = function(n) {\n    if (n &lt; 0) {\n        return(\"Error: Factorial of a negative number is undefined.\")\n    } else if (n == 0) {\n        return(1)\n    } else {\n        return(n * factorial_c(n - 1))\n    }\n}\n\nn = as.integer(readline(prompt=\"Enter a number: \"))\n\nres = factorial_c(n)\ncat(\"Factorial of\", n, \"is:\", res, \"\\n\")\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment1/#q3-write-a-program-to-write-first-n-terms-of-a-fibonacci-sequence-you-may-take-n-as-an-input-from-the-user","title":"Q3. Write a program to write first n terms of a Fibonacci sequence. You may take n as an input from the user.","text":"<pre><code>fib_sequence = function(n) {\n  if (n &lt;= 0) {\n    return(\"Error: Please enter a positive integer.\")\n  } else {\n    fib = numeric(n)\n    fib[1] = 0\n    if (n &gt; 1) fib[2] = 1\n    for (i in 3:n) {\n      fib[i] = fib[i - 1] + fib[i - 2]\n    }\n    return (fib)\n  }\n}\n\nn = as.integer(readline(prompt=\"Enter the number of Fibonacci terms: \"))\n\nfib_seq = fib_sequence(n)\ncat(\"Fibonacci Sequence till\", n, \"is:\", fib_seq, \"\\n\")\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment1/#q4-write-an-r-program-to-make-a-simple-calculator-which-can-add-subtract-multiply-and-divide","title":"Q4. Write an R program to make a simple calculator which can add, subtract, multiply and divide.","text":"<pre><code>calculator = function(x, y, operation) {\n  switch(operation,\n    \"add\" = c(\"+\",x + y),\n    \"subtract\" = c(\"-\",x - y),\n    \"multiply\" = c(\"*\",x * y),\n    \"divide\" = if (y != 0) c(\"/\",x / y) else return(\"Error: Division by zero.\")\n    )\n}\n\nx = as.numeric(readline(prompt=\"Enter first number: \"))\ny = as.numeric(readline(prompt=\"Enter second number: \"))\noperation = readline(prompt=\"Enter operation (add, subtract, multiply, divide): \")\n\nres = calculator(x, y, operation)\ncat(x, res[1], y, \"is:\", res[2], \"\\n\")\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment1/#q5-explore-plot-pie-barplot-etc-the-plotting-options-which-are-built-in-functions-in-r","title":"Q5. Explore plot, pie, barplot etc. (the plotting options) which are built-in functions in R.","text":"<pre><code>x = 1:10\ny = x^2\nplot(x, y, main=\"Basic Plot\", xlab=\"x-axis\", ylab=\"y-axis\", col=\"blue\", pch=19)\n\n# Box Plot\ndata &lt;- list(A = rnorm(100, mean = 5), B = rnorm(100, mean = 10), C = rnorm(100, mean = 15))\nboxplot(data, main = \"Box Plot Example\", xlab = \"Categories\", ylab = \"Values\")\nlegend(\"topright\", legend = c(\"A\", \"B\", \"C\"), fill = c(\"white\", \"white\", \"white\"))\n\n# Pie Chart\nslices = c(10, 20, 30, 40)\nlabels = c(\"A\", \"B\", \"C\", \"D\")\npie(slices, labels=labels, main=\"Basic Pie Chart\")\n\n# Bar Plot\ncounts_matrix &lt;- matrix(c(10, 15, 20, 25, 12, 18, 22, 28), nrow = 2, ncol = 4, byrow = TRUE)\nbarplot(counts_matrix, beside = TRUE, main = \"Bar Plot with Multiple Bars\",\n        xlab = \"Categories\", ylab = \"Counts\", col = c(\"green\", \"blue\"),\n        legend = c(\"Group 1\", \"Group 2\"))\n\n# Histogram\nhist_data &lt;- rnorm(100, mean = 50, sd = 10)\nhist(hist_data, main = \"Histogram Example\", xlab = \"Value\", col = \"purple\", border = \"black\", breaks = 10)\n\n# Scatter Plot\nx_sc = rnorm(100)\ny_sc = x_sc + rnorm(100, mean=0.5)\nplot(x_sc, y_sc, main=\"Scatter Plot\", xlab=\"x-axis\", ylab=\"y-axis\", col=\"red\", pch=19)\nlegend(\"topright\", legend = \"Scatter Points\", col = \"red\", pch = 19)\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment2/","title":"Assignment 2","text":""},{"location":"Thapar/Year3/COE/UCS410/Assignment2/#q1","title":"Q1.","text":"<p>(a) Suppose there is a chest of coins with 20 gold, 30 silver and 50 bronze coins. You randomly draw 10 coins from this chest. Write an R code which will give us the sample space for this experiment. (use of <code>sample()</code>: an in-built function in R) (b) In a surgical procedure, the chances of success and failure are 90% and 10% respectively. Generate a sample space for the next 10 surgical procedures performed. (use of <code>prob()</code>: an in-built function in R)</p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment2/#1-a","title":"1. (a)","text":"<pre><code>chest = c(rep(\"gold\", 20), rep(\"silver\", 30), rep(\"bronze\", 50))\n# Randomly draw 10 coins\ndraw = sample(chest, size=10, replace=FALSE)\n\ncat(\"1. (a) Sample Size:\", draw, \"\\n\");\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment2/#1-b","title":"1. (b)","text":"<pre><code>outcomes = c(\"Success\", \"Failure\")\nprobabilities = c(0.9, 0.1)\n\nsurgery_out = sample(outcomes, size=10, replace=TRUE, prob=probabilities)\n\ncat(\"   (b) Sample Space for next 10 surgical procedures:\", surgery_out, \"\\n\")\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment2/#q2-a-room-has-n-people-and-each-has-an-equal-chance-of-being-born-on-any-of-the-365-days-of-the-year-for-simplicity-well-ignore-leap-years-what-is-the-probability-that-two-people-in-the-room-have-the-same-birthday","title":"Q2. A room has n people, and each has an equal chance of being born on any of the 365 days of the year. (For simplicity, we\u2019ll ignore leap years). What is the probability that two people in the room have the same birthday?","text":"<p>(a) Use an R simulation to estimate this for various n. (b) Find the smallest value of n for which the probability of a match is greater than 5.</p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment2/#2-a","title":"2. (a)","text":"<pre><code>birth_sim = function(n, trials = 10000) {\n  count = 0\n  for (i in 1:trials) {\n    birth = sample(1:365, size=n, replace=TRUE)\n    if (length(unique(birth)) &lt; n) {\n      count = count + 1\n    }\n  }\n  return (count / trials)\n}\n\ncat(\"2. (a) Probability of matching birthdays for n = 1 to 50:\\n\")\nfor (n in 1:50) {\n  cat(\"    For n =\", n, \"probability of matching birthdays is:\", birth_sim(n), \"\\n\")\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment2/#2-b","title":"2. (b)","text":"<pre><code>small_n = function() {\n  n = 1\n  while (birth_sim(n) &lt; 0.5) {\n    n = n + 1\n  }\n  return(n)\n}\n\ncat(\"   (b) Smallest n for which probability of matching birthdays is just above 50% is:\", small_n(), \"\\n\")\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment2/#q3-write-an-r-function-for-computing-conditional-probability-call-this-function-to-do-the-following-problem","title":"Q3. Write an R function for computing conditional probability. Call this function to do the following problem:","text":"<p>suppose the probability of the weather being cloudy is 40%. Also suppose the probability of rain on a given day is 20% and that the probability of clouds on a rainy day is 85%. If it\u2019s cloudy outside on a given day, what is the probability that it will rain that day?   <pre><code>cond_prob = function(p_a_and_b, p_b) {\n  return(p_a_and_b / p_b)\n}\n\np_cloudy = 0.4\np_rain = 0.2\np_cloud_and_rain = 0.85\n\np_cloudy_given_rain &lt;- 0.85\n\n# Calculate P(rain and cloudy)\np_rain_and_cloudy &lt;- p_rain * p_cloudy_given_rain\n\n# Calculate conditional probability\np_rain_given_cloudy &lt;- cond_prob(p_rain_and_cloudy, p_cloudy)\n\n# Output the result\ncat(\"3. Probability of Rain Given Cloudy is:\", p_rain_given_cloudy, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment2/#q4-the-iris-dataset-is-a-built-in-dataset-in-r-that-contains-measurements-on-4-different-attributes-in-centimeters-for-150-flowers-from-3-different-species-load-this-dataset-and-do-the-following","title":"Q4. The iris dataset is a built-in dataset in R that contains measurements on 4 different attributes (in centimeters) for 150 flowers from 3 different species. Load this dataset and do the following:","text":"<p>(a) Print first few rows of this dataset. (b) Find the structure of this dataset. c Find the range of the data regarding the sepal length of flowers. (d) Find the mean of the sepal length. (e) Find the median of the sepal length. (f) Find the first and the third quartiles and hence the interquartile range. (g) Find the standard deviation and variance. (h) Try doing the above exercises for sepal.width, petal.length and petal.width. (i) Use the built-in function summary on the dataset Iris.   <pre><code>data(iris)\n\ncat(\"4. (a) Head of the iris dataset:\\n\")\n# 4. (a) Displaying the first few rows of the iris dataset\nprint(head(iris))\n\ncat(\"\\n4. (b) Structure of the iris dataset:\\n\")\n# 4. (b) Displaying the structure of the iris dataset\nstr(iris)\n\ncat(\"\\n4. (c) Range of Sepal.Length:\\n\")\n# 4. (c) Finding the range of Sepal.Length\ncat(\"Range:\", range(iris$Sepal.Length), \"\\n\")\n\ncat(\"\\n4. (d) Mean of Sepal.Length:\\n\")\n# 4. (d) Calculating the mean of Sepal.Length\ncat(\"Mean:\", mean(iris$Sepal.Length), \"\\n\")\n\ncat(\"\\n4. (e) Median of Sepal.Length:\\n\")\n# 4. (e) Calculating the median of Sepal.Length\ncat(\"Median:\", median(iris$Sepal.Length), \"\\n\")\n\ncat(\"\\n4. (f) Interquartile Range of Sepal.Length:\\n\")\n# 4. (f) Calculating the Interquartile Range (IQR) of Sepal.Length\nquartiles &lt;- quantile(iris$Sepal.Length, probs = c(0.25, 0.75))\nIQR &lt;- quartiles[2] - quartiles[1]\ncat(\"1st Quartile:\", quartiles[1], \"3rd Quartile:\", quartiles[2], \"\\n\")\ncat(\"Interquartile Range (IQR):\", IQR, \"\\n\")\n\ncat(\"\\n4. (g) Standard Deviation and Variance of Sepal.Length:\\n\")\n# 4. (g) Calculating the standard deviation and variance of Sepal.Length\ncat(\"Standard Deviation:\", sd(iris$Sepal.Length), \"\\n\")\ncat(\"Variance:\", var(iris$Sepal.Length), \"\\n\")\n\ncat(\"\\n4. (h) Mean of Sepal.Width, Petal.Length, and Petal.Width:\\n\")\n# 4. (h) Calculating the mean of Sepal.Width, Petal.Length, and Petal.Width\ncat(\"Mean of Sepal.Width:\", mean(iris$Sepal.Width), \"\\n\")\ncat(\"Mean of Petal.Length:\", mean(iris$Petal.Length), \"\\n\")\ncat(\"Mean of Petal.Width:\", mean(iris$Petal.Width), \"\\n\")\n\ncat(\"\\n4. (i) Summary of the Iris Dataset:\\n\")\n# 4. (i) Displaying the summary of the iris dataset\nprint(summary(iris))\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment2/#q5-r-does-not-have-a-standard-in-built-function-to-calculate-mode-so-we-create-a-user-function-to-calculate-mode-of-a-data-set-in-r-this-function-takes-the-vector-as-input-and-gives-the-mode-value-as-output","title":"Q5. R does not have a standard in-built function to calculate mode. So we create a user function to calculate mode of a data set in R. This function takes the vector as input and gives the mode value as output.","text":"<pre><code>gmode = function(v) {\n  uniqv = unique(v)\n  uniqv[which.max(tabulate(match(v, uniqv)))]\n}\n\nv = c(2, 3, 3, 5, 5, 5, 7)\ncat(\"5. Mode among [\", paste(v, collapse = \", \"), \"] is:\", gmode(v), \"\\n\")\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment3/","title":"Assignment 3","text":""},{"location":"Thapar/Year3/COE/UCS410/Assignment3/#q1-roll-12-dice-simultaneously-and-let-x-denotes-the-number-of-6s-that-appear-calculate-the-probability-of-getting-7-8-or-9-6s-using-r","title":"Q1. Roll 12 dice simultaneously, and let X denotes the number of 6\u2019s that appear. Calculate the probability of getting 7, 8 or 9, 6\u2019s using R.","text":"<p>(Try using the function <code>pbinom()</code>; If we set S = {get a 6 on one roll},  P(S) = 1/6  and the rolls constitute Bernoulli trials; thus  X \u223c binom(size=12, prob=1/6)  and we are looking for  P(7 \u2264 X \u2264 9) .   <pre><code>size = 12\nprob = 1/6\n\np_7_to_9 = pbinom(9, size, prob) - pbinom(6, size, prob)\n\ncat(\"1. Probability of getting 7, 8 or 9, 6\u2019s is:\", p_7_to_9, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment3/#q2-assume-that-the-test-scores-of-a-college-entrance-exam-fits-a-normal-distribution-furthermore-the-mean-test-score-is-72-and-the-standard-deviation-is-152-what-is-the-percentage-of-students-scoring-84-or-more-in-the-exam","title":"Q2. Assume that the test scores of a college entrance exam fits a normal distribution. Furthermore, the mean test score is 72, and the standard deviation is 15.2. What is the percentage of students scoring 84 or more in the exam?","text":"<pre><code>mean = 72\nsd = 15.2\n\np_84_or_more = 1 - pnorm(84, mean, sd)\n\ncat(\"2. Percentage of students scoring 84 or more in the exam is:\", p_84_or_more * 100, \"%\\n\")\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment3/#q3-on-the-average-five-cars-arrive-at-a-particular-car-wash-every-hour-let-x-count-the-number-of-cars-that-arrive-from-10am-to-11am-then-x-poisson-5-x-poisson-5-what-is-probability-that-no-car-arrives-during-this-time-next-suppose-the-car-wash-above-is-in-operation-from-8am-to-6pm-and-we-let-y-be-the-number-of-customers-that-appear-in-this-period-since-this-period-covers-a-total-of-10-hours-we-get-that-y-poisson-5-10-50-y-poisson-5-10-50-what-is-the-probability-that-there-are-between-48-and-50-customers-inclusive","title":"Q3. On the average, five cars arrive at a particular car wash every hour. Let X count the number of cars that arrive from 10AM to 11AM, then  X \u223c Poisson(\u03bb = 5) . What is probability that no car arrives during this time. Next, suppose the car wash above is in operation from 8AM to 6PM, and we let Y be the number of customers that appear in this period. Since this period covers a total of 10 hours, we get that  Y \u223c Poisson(\u03bb = 5 \u00d7 10 = 50) . What is the probability that there are between 48 and 50 customers, inclusive?","text":"<pre><code># a. Probability that no car arrives between 10 AM and 11 AM\np_no_car = dpois(0, lambda=5)\ncat(\"1. (a) Probability that no car arrives between 10 AM and 11 AM is: \", p_no_car, \"\\n\")\n\n# b. Probability that between 48 and 50 customers arrive between 8AM and 6PM (10 hours)\n# - P(48 &lt;= Y &lt;= 50) = P(Y &lt;= 50) - P(Y &lt;= 47)\np_48_to_50 = ppois(50, lambda=5*10) - ppois(47, lambda=5*10)\n\ncat(\"   (b) Probability that between 48 and 50 customers arrive between 8AM and 6PM is:\", p_48_to_50, \"\\n\")\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment3/#q4-suppose-in-a-certain-shipment-of-250-pentium-processors-there-are-17-defective-processors-a-quality-control-consultant-randomly-collects-5-processors-for-inspection-to-determine-whether-or-not-they-are-defective-let-x-denote-the-number-of-defectives-in-the-sample-find-the-probability-of-exactly-3-defectives-in-the-sample-that-is-find-px-3","title":"Q4. Suppose in a certain shipment of 250 Pentium processors there are 17 defective processors. A quality control consultant randomly collects 5 processors for inspection to determine whether or not they are defective. Let X denote the number of defectives in the sample. Find the probability of exactly 3 defectives in the sample, that is, find P(X = 3).","text":"<pre><code># Parameters for the hypergeometric distribution\nm = 17   # number of defective processors\nn = 250 - 17  # number of non-defective processors\nk = 5    # sample size\n\n# P(X = 3) for X ~ Hypergeometric(m = 17, n = 233, k = 5)\np_exactly_3_defectives = dhyper(3, m, n, k)\n\ncat(\"4. Probability of exactly 3 defectives in the sample is:\", p_exactly_3_defectives, \"\\n\")\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment3/#q5-a-recent-national-study-showed-that-approximately-447-of-college-students-have-used-wikipedia-as-a-source-in-at-least-one-of-their-term-papers-let-x-equal-the-number-of-students-in-a-random-sample-of-size-n-31-who-have-used-wikipedia-as-a-source","title":"Q5. A recent national study showed that approximately 44.7% of college students have used Wikipedia as a source in at least one of their term papers. Let X equal the number of students in a random sample of size n = 31 who have used Wikipedia as a source.","text":"<p>(a) How is X distributed? (b) Sketch the probability mass function. (c\u200b) Sketch the cumulative distribution function. (d) Find mean, variance and standard deviation of X   <pre><code># 5. (a) Distribution of X\ncat(\"5. (a) X is distributed as Binomial with parameters n = 31 and p = 0.447:\\n\")\ncat(\"X ~ Binomial(n = 31, p = 0.447)\\n\")\n\n# 5. (b) Sketch the Probability Mass Function (PMF)\nn &lt;- 31\np &lt;- 0.447\nx_vals &lt;- 0:n\npmf_vals &lt;- dbinom(x_vals, n, p)\n\n# Plot the PMF\nplot(x_vals, pmf_vals, type = \"h\", lwd = 2, col = \"blue\",\n     xlab = \"Number of Students Using Wikipedia\", ylab = \"Probability\",\n     main = \"Probability Mass Function of X\")\ngrid()\n\n# 5. (c) Sketch the Cumulative Distribution Function (CDF)\n# Calculate the CDF\ncdf_vals &lt;- pbinom(x_vals, n, p)\n\n# Plot the CDF\nplot(x_vals, cdf_vals, type = \"s\", lwd = 2, col = \"red\",\n     xlab = \"Number of Students Using Wikipedia\", ylab = \"Cumulative Probability\",\n     main = \"Cumulative Distribution Function of X\")\ngrid()\n\n# 5. (d) Find mean, variance, and standard deviation of X\nmean_x &lt;- n * p\nvariance_x &lt;- n * p * (1 - p)\nsd_x &lt;- sqrt(variance_x)\n\ncat(\"\\n5. (d) Mean, Variance, and Standard Deviation of X:\\n\")\ncat(\"Mean of X: \", mean_x, \"\\n\")\ncat(\"Variance of X: \", variance_x, \"\\n\")\ncat(\"Standard Deviation of X: \", sd_x, \"\\n\")s\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment4/","title":"Assignment 4","text":""},{"location":"Thapar/Year3/COE/UCS410/Assignment4/#q1-the-probability-distribution-of-x-the-number-of-imperfections-per-10-meters-of-a-synthetic-fabric-in-continuous-rolls-of-uniform-width-is-given-as","title":"Q1. The probability distribution of X, the number of imperfections per 10 meters of a synthetic fabric in continuous rolls of uniform width, is given as","text":"x 0 1 2 3 4 p(x) 0.41 0.37 0.16 0.05 0.01 <p>Find the average number of imperfections per 10 meters of this fabric. (Try functions <code>sum( )</code>, <code>weighted.mean( )</code>, <code>c(a %*% b)</code> to find expected value/mean.   <pre><code># Define the values of X and their probabilities\nx = c(0, 1, 2, 3, 4)\np_x = c(0.41, 0.37, 0.16, 0.05, 0.01)\n\n# Calculate the expected value using weighted.mean\nexpected_value = weighted.mean(x, p_x)\nexpected_value_matrix &lt;- c(x %*% p_x)\n\nif (expected_value == expected_value_matrix) {\n  cat(\"1. Expected values are the same\\n\")\n} else {\n  cat(\"1. Expected values are different\\n\")\n}\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment4/#q2-the-time-t-in-days-required-for-the-completion-of-a-contracted-project-is-a-random-variable-with-probability-density-function-ft-01-e-01t-ft-01-e-01t-for-t-0-and-0-otherwise-find-the-expected-value-of-t","title":"Q2. The time T, in days, required for the completion of a contracted project is a random variable with probability density function  f(t) = 0.1 e^{(-0.1t)}  for t &gt; 0 and 0 otherwise. Find the expected value of T.","text":"<p>Use function <code>integrate()</code> to find the expected value of continuous random variable T.   <pre><code>f = function(t) {\n  return(0.1 * exp(-0.1 * t))\n}\n\nexpected_value_t = integrate(function(t) t * f(t), lower = 0, upper = Inf)$value\n\ncat(\"2. Expected value of T is: \", expected_value_t, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment4/#q3-a-bookstore-purchases-three-copies-of-a-book-at-600-each-and-sells-them-for-1200-each-unsold-copies-are-returned-for-200-each-let-x-number-of-copies-sold-and-y-net-revenue-if-the-probability-mass-function-of-x-is","title":"Q3. A bookstore purchases three copies of a book at $6.00 each and sells them for $12.00 each. Unsold copies are returned for $2.00 each. Let X = {number of copies sold} and Y = {net revenue}. If the probability mass function of X is","text":"x 0 1 2 3 p(x) 0.1 0.2 0.2 0.5 <p>Find the expected value of Y.   <pre><code>x = c(0, 1, 2, 3)\np_x = c(0.1, 0.2, 0.2, 0.5)\n\n# Net Revenue = (Revenue from sold books) - (Cost of purchased books) + (Refund from unsold books)\nY = function(x) {\n  return((12 * x - 6 * 3) + (3 - x) * 2)\n}\n\nexpected_value_y = sum(p_x * Y(x))\n\ncat(\"3. Expected value of Y is:\", expected_value_y, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment4/#q4-find-the-first-and-second-moments-about-the-origin-of-the-random-variable-x-with-probability-density-function-fx-05e-x-fx-05e-x-1-x-10-and-0-otherwise-further-use-the-results-to-find-mean-and-variance","title":"Q4. Find the first and second moments about the origin of the random variable X with probability density function  f(x) = 0.5e^{-|x|} , 1 &lt; x &lt; 10 and 0 otherwise. Further use the results to find Mean and Variance.","text":"<p>(kth moment =  E(X^k)  , Mean = first moment and Variance = second moment \u2013  Mean^2 .   <pre><code># Define the probability density function f(x)\nf_x = function(x) {\n  return(0.5 * exp(-abs(x)))\n}\n\n# Calculate the first moment (Mean)\nfirst_moment = integrate(function(x) x * f_x(x), lower = 1, upper = 10)$value\n\n# Calculate the second moment\nsecond_moment = integrate(function(x) x^2 * f_x(x), lower = 1, upper = 10)$value\n\n# Mean and variance\nmean_x = first_moment\nvariance_x = second_moment - mean_x^2\n\n# Output the results\ncat(\"4. Mean and Variance of X\\n\")\ncat(\"Mean of X is:\", mean_x, \"\\n\")\ncat(\"Variance of X is:\", variance_x, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment4/#q5-let-x-be-a-geometric-random-variable-with-probability-distribution","title":"Q5. Let X be a geometric random variable with probability distribution","text":"f(x) = \\frac{3}{4} \\left( \\frac{1}{4}\\right)^{x-1} \\hspace{3cm},x= 1,2,3,\\dots  <p>Write a function to find the probability distribution of the random variable  Y = X^2  and find probability of Y for  X = 3 . Further, use it to find the expected value and variance of Y for  X = 1,2,3,4,5 .   <pre><code># Define the geometric probability function\nf_X = function(x) {\n  (3/4) * (1/4)^(x - 1)\n}\n\n# Define the function to calculate P(Y = X^2)\nf_Y = function(x) {\n  f_X(x)\n}\n\nX = 3\nY = X^2\n\nprob_Y = f_Y(X)\n\ncat(\"Probability of Y at X =\", X, \"is\", prob_Y, \"\\n\")\n\n# Function to compute expected value and variance of Y for X = 1, 2, 3, 4, 5\nexpected_value_Y = 0\nvariance_Y = 0\nx_values = 1:5\n\n# Calculate expected value of Y = X^2\nfor (x in x_values) {\n  Y = x^2\n  expected_value_Y = expected_value_Y + Y * f_X(x)\n  variance_Y = variance_Y + Y^2 * f_X(x)\n}\n\n# Adjust variance by subtracting mean squared\nvariance_Y = variance_Y - expected_value_Y^2\n\ncat(\"5. Expected value and Variance of Y\\n\")\ncat(\"Expected value of Y is:\", expected_value_Y, \"\\n\")\ncat(\"Variance of Y is:\", variance_Y, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment5/","title":"Assignment 5","text":""},{"location":"Thapar/Year3/COE/UCS410/Assignment5/#1-consider-that-x-is-the-time-in-minutes-that-a-person-has-to-wait-in-order-to-take-a-flight-if-each-flight-takes-off-each-hour-x-sim-u0-60x-sim-u0-60-find-the-probability-that","title":"1. Consider that X is the time (in minutes) that a person has to wait in order to take a flight. If each flight takes off each hour X \\sim U(0, 60). Find the probability that","text":"<p>(a) waiting time is more than 45 minutes, and  (b) waiting time lies between 20 and 30 minutes.   <pre><code>min = 0\nmax = 60\n\n# (a) P(X &gt; 45)\nP_more_45 = 1 - punif(45, min, max)\n\n# (b) P(20 &lt;= X &lt;= 30)\nP_20_30 = punif(30, min, max) - punif(20, min, max)\n\ncat(\"P(X &gt; 45) = \", P_more_45, \"\\nP(20 &lt;= X &lt;= 30) = \", P_20_30, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment5/#2-the-time-in-hours-required-to-repair-a-machine-is-an-exponential-distributed-random-variable-with-parameter-lambda-frac12-lambda-frac12","title":"2. The time (in hours) required to repair a machine is an exponential distributed random variable with parameter  \\lambda = \\frac{1}{2} .","text":"<p>(a) Find the value of density function at x = 3. (b) Plot the graph of exponential probability distribution for  0 \\leq x \\leq 5 . (c\u200b) Find the probability that a repair time takes at most 3 hours. (d) Plot the graph of cumulative exponential probabilities for  0 \\leq x \\leq 5 . (e) Simulate 1000 exponential distributed random numbers with  \\lambda = \\frac{1}{2}  and plot the simulated data.   <pre><code>lambda = 1/2\n# (a) Value at density at x = 3\ndensity_at_3 = dexp(3, lambda)\n\n# (b) Plot of exponential probability distribution for 0 &lt;= x &lt;= 5\nx = seq(0, 5, 0.01)\ny = dexp(x, rate = lambda)\nplot(x, y, type = \"l\", col = \"blue\", xlab = \"x\", ylab = \"Density\", main = \"Exponential Probability Distribution\")\n\n# (c) Probability that a repair time takes at most 3 hours\np_at_most_3 = pexp(3, rate = lambda)\n\n# (d) Plot the graph of cummilative exponential probabilities for 0 &lt;= x &lt;= 5\ny_cdf = pexp(x, rate = lambda)\nplot(x, y_cdf, type = \"l\", col = \"red\", xlab = \"x\", ylab = \"Cumulative Probability\", main = \"Exponential Cumulative Probability Distribution\")\n\n# (e) Simulate 1000 exponential random numbers and plot\nsim_data = rexp(1000, rate = lambda)\nhist(sim_data, breaks, freq = FALSE, col = \"green\", xlab = \"x\", ylab = \"Frequency\", main = \"Simulated Exponential Random Numbers\")\n\ncat(\"Density at x = 3: \", density_at_3, \"\\n\")\ncat(\"P(X &lt;= 3) = \", p_at_most_3, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment5/#3-the-lifetime-of-certain-equipment-is-described-by-a-random-variable-x-that-follows-gamma-distribution-with-parameters-alpha-2-alpha-2-and-beta-frac13-beta-frac13","title":"3. The lifetime of certain equipment is described by a random variable X that follows Gamma distribution with parameters  \\alpha = 2  and  \\beta = \\frac{1}{3} .","text":"<p>(a) Find the probability that the lifetime of equipment is  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(i) 3 units of time, and  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(ii) at least 1 unit of time.  (b) What is the value of c, if  P(X \\leq c) \\geq 0.70 ? (Hint: try quantile function <code>qgamma()</code>)   <pre><code>alpha = 2\nbeta = 1/3\n\n# (a) Probability that the lifetime of equipment is\n# (i) P(X &lt;= 3)\nP_leq_3 = pgamma(3, shape = alpha, rate = beta)\n\n# (ii) P(X &gt;= 1)\nP_geq_1 = 1 - pgamma(1, shape = alpha, rate = beta)\n\n# (b) Find c such that P(X &lt;= c) &gt;= 0.70\nc_val = qgamma(0.70, shape = alpha, rate = beta)\n\ncat(\"P(X &lt;= 3):\", P_leq_3, \"\\n\")\ncat(\"P(X &gt;= 1):\", P_geq_1, \"\\n\")\ncat(\"Value of c (P(X &lt;= c) &gt;= 0.70)\", c_val, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment6/","title":"Assignment 6","text":""},{"location":"Thapar/Year3/COE/UCS410/Assignment6/#1-the-joint-probability-density-of-two-random-variables-x-and-y-is","title":"(1) The joint probability density of two random variables X and Y is","text":"f(x, y) = \\begin{cases} \\frac{2 \\cdot (2x + 3y)}{5}, &amp; \\text{if } 0 \\leq x, y \\leq 1 \\\\ 0, &amp; \\text{elsewhere} \\end{cases}  <p>Then write a R-code to  (i) check that it is a joint density function or not? (Use <code>integral2()</code>) (ii) find marginal distribution g(x) at x = 1. (iii) find the marginal distribution h(y) at y = 0. (iv) find the expected value of g(x, y) = xy.   <pre><code>f_xy = function(x,y) {\n  ifelse(0 &lt;= x &amp; x &lt;= 1 &amp; 0 &lt;= y &amp; y &lt;= 1, 2*(2*x + 3*y)/5, 0)\n}\n\n# (i) Check if it is a joint density function\ncheck = integral2(function(x,y) f_xy(x, y), xmin = 0, xmax = 1, ymin = 0, ymax = 1)\n\n# (ii) Find the marginal distribution g(x) at x = 1\ng_x = function(x) {\n  integrate(function(y) f_xy(x, y), lower = 0, upper = 1)$value\n}\ng_x_at_1 = g_x(1)\n\n# (iii) Find the marginal distribution h(y) at y = 0\nh_y = function(y){\n  integrate(function(x) f_xy(x, y), lower = 0, upper = 1)$value\n}\nh_y_at_0 = h_y(0)\n\n# (iv) Find the expected value of g(x, y) = xy\nexp_val = integral2(function(x, y) x*y*f_xy(x, y), xmin = 0, xmax = 1, ymin = 0, ymax = 1)$value\n\ncat(\"Integral over the domain (should equal 1):\", check$value, \"\\n\")\ncat(\"Marginal distribution g(x) at x = 1:\", g_x_at_1, \"\\n\")\ncat(\"Marginal distribution h(y) at y = 0:\", h_y_at_0, \"\\n\")\ncat(\"Find the expected value of g(x, y) = xy:\", exp_val, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment6/#2-the-joint-probability-mass-function-of-two-random-variables-x-and-y-is","title":"(2) The joint probability mass function of two random variables X and Y is","text":"f(x, y) = \\{ \\frac{(x + y)}{30}; x = 0, 1, 2, 3; y = 0, 1, 2 \\}  <p>Then write a R-code to  (i) display the joint mass function in rectangular (matrix) form.  (ii) check that it is joint mass function or not? (use: <code>Sum()</code>)  (iii) find the marginal distribution g(x) for x = 0, 1, 2, 3. (Use: <code>apply()</code>)  (iv) find the marginal distribution h(y) for y = 0, 1, 2. (Use: <code>apply()</code>)  (v) find the conditional probability at x = 0 given y = 1.  (vi) find E(x), E(y), E(xy), V ar(x), V ar(y), Cov(x, y) and its correlation coefficient.   <pre><code>x_vals = 0:3\ny_vals = 0:2\n\n# (i) Display the joint mass function in rectangular (matrix) form\njoint_pmf = outer(x_vals, y_vals, function(x, y) (x + y)/30)\nrownames(joint_pmf) = paste(\"x =\", x_vals)\ncolnames(joint_pmf) = paste(\"y =\", y_vals)\n\n# (ii) Check if it is a joint mass function\ntotal_prob = sum(joint_pmf)\n\n# (iii) Find the marginal distribution g(x) for x = 0, 1, 2, 3\ng_x = apply(joint_pmf, 1, sum)\n\n# (iv) Find the marginal distribution h(y) for y = 0, 1, 2\nh_y = apply(joint_pmf, 2, sum)\n\n# (v) Find the conditional probability at x = 0 given y = 1\nP_y_1 = h_y[2]\np_x_0_given_y_1 = joint_pmf[1, 2]/P_y_1\n\n# (vi) Find E(x), E(y), E(xy), Var(x), Var(y), Cov(x, y) and its correlation coefficient\nE_x = sum(x_vals*g_x)\nE_y = sum(y_vals*h_y)\nE_xy = sum(outer(x_vals, y_vals, function(x, y) x*y)*joint_pmf)\n\nVar_x = sum((x_vals - E_x)^2*g_x)\nVar_y = sum((y_vals - E_y)^2*h_y)\nCov_xy = E_xy - E_x*E_y\ncorr = Cov_xy/sqrt(Var_x*Var_y)\n\ncat(\"Joint PMF:\\n\", capture.output(print(joint_pmf)), sep=\"\\n\")\ncat(\"Total Probabiltiy (equal to 1):\", total_prob, \"\\n\")\ncat(\"Marginal distribution g(x) for x = 0, 1, 2, 3:\", g_x, \"\\n\")\ncat(\"Marginal distribution h(y) for y = 0, 1, 2:\", h_y, \"\\n\")\ncat(\"P(x = 0 | y = 1):\", p_x_0_given_y_1, \"\\n\")\ncat(\"E(X):\", E_x, \"\\nE(y):\", E_y, \"\\nE(xy):\", E_xy, \"\\nVar(x):\", Var_x \"\\nVar(y):\", Var_y, \"\\nCov(x, y):\", Cov_xy, \"\\nCorrelation Coefficient:\", corr, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment7/","title":"Assignment 7","text":""},{"location":"Thapar/Year3/COE/UCS410/Assignment7/#1-use-the-rtn-df-function-in-r-to-investigate-the-t-distribution-for-n-100-and-df-n-1-and-plot-the-histogram-for-the-same","title":"(1) Use the <code>rt(n, df)</code> function in r to investigate the t-distribution for n = 100 and df = n \u2212 1 and plot the histogram for the same.","text":"<pre><code>n = 100; df = n-1\nt_vals = rt(n, df)\nhist(t_vals, breaks = 30, freq = FALSE, xlab = \"Values\", main = \"Histogram of t-Distribution (n = 100, df = 99)\")\nlines(density(t_vals), col = \"blue\")\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment7/#2-use-the-rchisqn-df-function-in-r-to-investigate-the-chi-square-distribution-with-n-100-and-df-2-10-25","title":"(2) Use the <code>rchisq(n, df)</code> function in r to investigate the chi-square distribution with n = 100 and df = 2, 10, 25.","text":"<pre><code>n = 100; df_vals = c(2, 10, 25)\nchi_sq_vals = lapply(df_vals, function(df) {\n  hist(rchisq(n, df), breaks = 30, freq = FALSE, xlab = \"Values\", main = paste(\"Histogram of Chi-Square Distribution (n = 100, df =\", df, \")\")\n})\npar(mfrow = c(1, 1))\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment7/#3-generate-a-vector-of-100-values-between-6-and-6-use-the-dt-function-in-r-to-find-the-values-of-a-t-distribution-given-a-random-variable-x-and-degrees-of-freedom-141030-using-these-values-plot-the-density-function-for-students-t-distribution-with-degrees-of-freedom-30-also-shows-a-comparison-of-probability-density-functions-having-different-degrees-of-freedom-141030","title":"(3) Generate a vector of 100 values between -6 and 6. Use the <code>dt()</code> function in r to find the values of a t-distribution given a random variable x and degrees of freedom 1,4,10,30. Using these values plot the density function for students t-distribution with degrees of freedom 30. Also shows a comparison of probability density functions having different degrees of freedom (1,4,10,30).","text":"<pre><code>x = seq(-6, 6, length = 100); df_vals = c(1, 4, 10, 30)\ndense_vals = lapply(df_vals, function(df) dt(x, df))\nplot(x, dense_vals[, 4], type = \"l\", main = \"t-Density (df=30)\", xlab = \"x\", ylab = \"Density\")\nplot(x, dense_vals[, 1], type = \"l\", col = 1, main = \"Comparison of t-Densities\", xlab = \"x\", ylab = \"Density\")\nlapply(2:4, function(i) lines(x, dense_vals[, i], col = i))\nlegend(\"topright\", legend = paste(\"df=\", df_vals), col = 1:4, lwd = 2)\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment7/#4-write-a-r-code","title":"(4) Write a r-code","text":"<p>(i) To find the 95<sup>th</sup> percentile of the F-distribution with (10, 20) degrees of freedom.  (ii) To calculate the area under the curve for the interval [0, 1.5] and the interval [1.5, +\u221e) of a F-curve with v1 = 10 and v2 = 20 (use <code>pf()</code>).  (iii) To calculate the quantile for a given area (= probability) under the curve for a F-curve with v1 = 10 and v2 = 20 that corresponds to q = 0.25, 0.5, 0.75 and 0.999. (use the <code>qf()</code>)  (iv) To generate 1000 random values from the F-distribution with v1 = 10 and v2 = 20 (use <code>rf()</code>)and plot a histogram.   <pre><code>v1 = 10 v2 = 20\n# (i) 95th percentile of F-distribution with (10, 20) degrees of freedom\nqf_95_percentile = qf(0.95, v1, v2)\n\n# (ii) Area under the curve for the interval [0, 1.5] and [1.5, +\u221e) of F-curve with v1 = 10 and v2 = 20\npf_0_1_5 = pf(1.5, v1, v2); pf_1_5_inf = 1 - pf_0_1_5\n\n# (iii) Quantile for a given area under the curve for F-curve with v1 = 10 and v2 = 20 that corresponds to q = 0.25, 0.5, 0.75 and 0.999\nqf_vals = qf(c(0.25, 0.5, 0.75, 0.999), v1, v2)\n\n# (iv) Generate 1000 random values from F-distribution with v1 = 10 and v2 = 20 and plot a histogram\nrf = rf(1000, v1, v2)\nhist(rf, breaks = 30, freq = FALSE, main = \"F-Distribution (10,20)\", xlab = \"Values\")\n\ncat(\"95th percentile of F-distribution with (10, 20) degrees of freedom: \", qf_95_percentile, \"\\n\")\ncat(\"Area under the curve for the interval [0, 1.5] of F-curve with v1 = 10 and v2 = 20: \", pf_0_1_5, \" and [1.5, +\u221e): \", pf_1_5_inf, \"\\n\")\ncat(\"Quantile for a given area under the curve for F-curve with v1 = 10 and v2 = 20 that corresponds to q = 0.25, 0.5, 0.75 and 0.999: \", qf_vals, \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment8/","title":"Assignment 8","text":""},{"location":"Thapar/Year3/COE/UCS410/Assignment8/#1-a-pipe-manufacturing-organization-produces-different-kinds-of-pipes-we-are-given-the-monthly-data-of-the-wall-thickness-of-certain-types-of-pipes-data-is-available-on-lms-clt-datacsv","title":"1. A pipe manufacturing organization produces different kinds of pipes. We are given the monthly data of the wall thickness of certain types of pipes (data is available on LMS Clt-data.csv).","text":"<p>The organization has an analysis to perform and one of the basic assumption of that analysis is that the data should be normally distributed.  You have the following tasks to do:  (a) Import the csv data file in R. (b) Validate data for correctness by counting number of rows and viewing the top ten rows of the dataset. (c\u200b) Calculate the population mean and plot the observations by making a histogram. (d) Mark the mean computed in last step by using the function abline.</p> <p>See the red vertical line in the histogram? That\u2019s the population mean. Comment on whether the data is normally distributed or not?  Now perform the following tasks:  (a) Draw sufficient samples of size 10, calculate their means, and plot them in R by making histogram. Do you get a normal distribution.  (b) Now repeat the same with sample size 50, 500 and 9000. Can you comment on what you observe. </p> <p>Here, we get a good bell-shaped curve and the sampling distribution approaches normal distribution as the sample sizes increase. Therefore, we can recommend the organization to use sampling distributions of mean for further analysis.</p> <pre><code># (a) Import the csv\ndata = read.csv(\"Clt-data.csv\")\n\n# (b) Validate data\ncat(\"Number of rows:\", nrow(data), \"\\n\")\ncat(\"Top 10 rows:\\n\", capture.output(head(data, 10)), sep = \"\\n\")\n\n# (c) Calculate population mean and plot histogram\npop_mean = mean(data$WallThickness, na.rm = TRUE)\ncat(\"Population mean:\", pop_mean, \"\\n\")\nhist(data$WallThickness, breaks = 30, freq = FALSE, col = \"lightblue\", xlab = \"Wall Thickness\", main = \"Wall Thickness of Pipes\")\n\n# (d) Mark the mean in histogram\nabline(v = pop_mean, col = \"red\", lwd = 2, lty = 2)\n\n# (a) Draw samples of size 10\nsample_means_10 = replicate(1000, mean(sample(data$WallThickness, 10, replace = TRUE)))\ncat(\"Sample mean for size 10:\", mean(sample_means_10), \"\\n\")\n\n# (b) Draw samples of size 50, 500, 9000\nsample_sizes = c(50, 500, 9000)\nfor (n in sample_sizes) {\n  sample_means = replicate(1000, mean(sample(data$WallThickness, n, replace = TRUE)))\n  cat(\"Sample mean for size\", n, \":\", mean(sample_means), \"\\n\")\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS410/Assignment8/#2-the-following-table-gives-information-on-ages-and-cholesterol-levels-for-a-random-sample-of-10-men","title":"2. The following table gives information on ages and cholesterol levels for a random sample of 10 men","text":"Age 58 69 43 39 63 52 47 31 74 36 Cholesterol 189 235 193 177 154 191 213 165 198 181 <p>Plot the scatter diagram and a regression line that will enable us to predict Cholesterol level on age. Further, estimate the cholesterol level of a 60 year-old man.   <pre><code>age = c(58, 69, 43, 39, 63, 52, 47, 31, 74, 36)\ncholesterol = c(189, 235, 193, 177, 154, 191, 213, 165, 198, 181)\n\nmodel = lm(cholesterol ~ age)\nplot(age, cholesterol, pch = 16, col = \"blue\", xlab = \"Age\", ylab = \"Cholesterol\", main = \"Cholesterol vs Age\")\nabline(model, col = \"red\", lwd = 2)\n\ncat(\"Predicted cholesterol for age 60:\", predict(model, newdata = data.frame(age = 60)), \"\\n\")\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS410/Assignment8/#3-a-research-methodology-course-has-recently-been-added-to-the-phd-curriculum-at-the-thapar-institute-of-engineering-and-technology-patiala-to-evaluate-its-effectiveness-students-take-a-test-on-formulating-research-problems-and-writing-research-papers-both-before-and-after-completing-the-course-below-are-the-marks-for-a-random-sample-of-ten-students","title":"3. A research methodology course has recently been added to the PhD curriculum at the Thapar Institute of Engineering and Technology, Patiala. To evaluate its effectiveness, students take a test on formulating research problems and writing research papers both before and after completing the course. Below are the marks for a random sample of ten students:","text":"Before the test 145 173 158 141 167 159 154 167 145 153 After the test 155 167 156 149 168 162 158 169 157 161 <p>Assume that the differences between the pre-course and post-course test scores are normally distributed, and a high score on the test indicates a strong level of assertiveness. Do the collected data, at 5% level of significance, provide enough evidence to conclude that research scholars become more assertive after completing the course?   <pre><code>before = c(145, 173, 158, 141, 167, 159, 154, 167, 145, 153)\nafter = c(155, 167, 156, 149, 168, 162, 158, 169, 157, 161)\nres = t.test(after - before, alternative = \"greater\")\n\nprint(res)\n</code></pre></p>"},{"location":"Thapar/Year3/COE/UCS413/","title":"NP","text":"<ol> <li>Assignment 1</li> <li>Assignment 2</li> <li>Assignment 3</li> <li>Assignment 4</li> <li>Assignment 5</li> <li>Assignemnt 6</li> <li>Assignemnt 7</li> </ol>"},{"location":"Thapar/Year3/COE/UCS413/Assignment1/","title":"Assignment 1","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment1/#learn-to-configure-telnet-ftp-and-ssh-server-on-unix-platforms","title":"Learn to configure telnet, ftp, and SSH server on Unix platforms.","text":"<p>a) Install and configure FTP Server on Ubuntu with vsftpd.  b) Install and configure Telent Server on Ubuntu with telnetd.  c) Install and configure SSH Server on Ubuntu with OpenSSH.</p> <p>The step by step procedure for installation and configuration of FTP, Telnet and SSH is provided for your help.</p>"},{"location":"Thapar/Year3/COE/UCS413/Assignment1/#a-install-and-configure-ftp-server-on-ubuntu-with-vsftpd","title":"a) Install and configure FTP Server on Ubuntu with vsftpd.","text":"<ol> <li> <p>Update package index and Install FTP. <pre><code>sudo apt update &amp;&amp; sudo apt install vsftpd\n</code></pre></p> </li> <li> <p>Configure the FTP server <pre><code>sudo nano /etc/vsftpd.conf\n</code></pre></p> </li> <li> <p>Add the following configurations to the <code>vsftpd.conf</code> file.   <pre><code>listen=YES                    # allows listening\nlisten_ipv6=NO                # disable listening for IPv6\nanonymous_enable=NO           # disable anonymous access\nlocal_enable=YES              # enable local user access\nwrite_enable=YES              # enable the FTP to be editable\n\n# Optional Configurations\nchroot_local_user=YES         # confines users to their home directory\nallow_writeable_chroot=YES    # allows home directory for each user to editable\n</code></pre></p> </li> <li> <p>Restart the vsftpd service. <pre><code>sudo systemctl restart vsftpd\n</code></pre></p> </li> <li> <p>Allow FTP though Firewall. <pre><code>sudo ufw allow 21/tcp\nsudo ufw reload\n</code></pre></p> </li> <li> <p>Test the FTP server. <pre><code>ftp localhost\n</code></pre></p> </li> </ol>"},{"location":"Thapar/Year3/COE/UCS413/Assignment1/#b-install-and-configure-telent-server-on-ubuntu-with-telnetd","title":"b) Install and configure Telent Server on Ubuntu with telnetd.","text":"<ol> <li> <p>Update package index and Install Telnet. <pre><code>sudo apt update &amp;&amp; sudo apt install telnetd\n</code></pre></p> </li> <li> <p>Configure Telnet Server. <pre><code>sudo systemctl enable telnet.service\nsudo systemctl start telnet.service\n</code></pre></p> </li> <li> <p>Allow Telnet though Firewall. <pre><code>sudo ufw allow 23/tcp\nsudo ufw reload\n</code></pre></p> </li> <li> <p>Test the server <pre><code>telnet localhost\n</code></pre></p> </li> </ol>"},{"location":"Thapar/Year3/COE/UCS413/Assignment1/#c-install-and-configure-ssh-server-with-openssh","title":"c) Install and Configure SSH Server with OpenSSH","text":"<ol> <li> <p>Update package index and Install OpenSSH. <pre><code>sudo apt update &amp;&amp; sudo apt install openssh-server\n</code></pre></p> </li> <li> <p>Configure OpenSSH server <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre></p> </li> <li> <p>Uncomment the following lines <pre><code>Port 22                   # port for SSH\nPermitRootLogin no        # disable root login over SSH\nPasswordAuthentication    # allow password Authentication\n</code></pre></p> </li> <li> <p>Restart the SSH service. <pre><code>sudo systemctl restart ssh\n</code></pre></p> </li> <li> <p>Allow SSH through Firewall. <pre><code>sudo ufw allow 22/tcp\nsudo ufw reload\n</code></pre></p> </li> <li> <p>Test the SSH server. <pre><code>ssh username@localhost\n</code></pre></p> </li> </ol>"},{"location":"Thapar/Year3/COE/UCS413/Assignment2/","title":"Assignment 2","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment2/#q1-learn-about-socket-header-files-and-basic-system-calls","title":"Q1. Learn about socket header files and basic system calls.","text":"<p>Socket header files contain data definitions, structures, constants, macros, and options used by socket subroutines. An application program must include the appropriate header file to make use of structures or other information a particular socket subroutine requires.</p>"},{"location":"Thapar/Year3/COE/UCS413/Assignment2/#commonly-used-socket-header-files-are","title":"Commonly used socket header files are:","text":"<ul> <li><code>/usr/include/netinet/in.h</code> Defines Internet constants and structures.</li> <li><code>/usr/include/netdb.h</code> Contains data definitions for socket subroutines.</li> <li><code>/usr/include/sys/socket.h</code> Contains data definitions and socket structures.</li> <li><code>/usr/include/sys/types.h</code> Contains data type definitions.</li> <li><code>/usr/include/arpa.h</code> Contains definitions for internet operations.</li> <li><code>/usr/include/sys/errno.h</code> Defines the error no values that are returned by drivers and other kernel-level code.</li> </ul>"},{"location":"Thapar/Year3/COE/UCS413/Assignment2/#elementary-socket-system-calls","title":"Elementary socket system calls:","text":"<ul> <li><code>socket()</code> System Call: Creates an end point for communication and returns a descriptor: <pre><code>int socket (int AddressFamily, int Type, int Protocol);\n</code></pre></li> <li> <p><code>Bind()</code> System call: Binds a name to a socket. The bind subroutine assigns a Name parameter to an unnamed socket. It assigns a local protocol address to a socket. <pre><code>int bind (int sockfd, struct sockaddr *myaddr, int addrlen);\n</code></pre></p> </li> <li> <p><code>connect()</code>  System call: The connect function is used by a TCP client to establish a connection with a TCP server. <pre><code>int connect(int sockfd, struct sockaddr *servaddr, int addrlen);\n</code></pre></p> </li> <li> <p><code>listen()</code> System call: This system call is used by a connection-oriented server to indicate that it is willing to receive connections. <pre><code>int listen (int sockfd, int backlog);\n</code></pre></p> </li> <li> <p><code>accept()</code> System call: The actual connection from some client process is waited for by having the server execute the accept system call. <pre><code>int accept (int sockfd, struct sockaddr *cliaddr, int *addrlen);\n</code></pre></p> </li> <li> <p><code>send()</code>, <code>sendto()</code>, <code>recv()</code> and <code>recvfrom()</code> System calls: These system calls are similar to the standard read and write functions.</p> </li> <li><code>close()</code> system call: The normal Unix close function is also used to close a socket and terminate a TCP connection. <pre><code>int close (int sockfd);\n</code></pre></li> </ul>"},{"location":"Thapar/Year3/COE/UCS413/Assignment2/#q2-create-an-echo-server-using-tcp-socket-programming-in-connection-oriented-scenario-echo-server-echo-back-return-back-the-message-sent-by-the-client-also-write-the-client-side-program-while-creating-program-focus-on-the-use-of-following-socket-programming-functions-socket-sockaddr_in-bind-listen-accept-ntohs-ntohl-readrecv-writesend-connect","title":"Q2. Create an Echo-Server using TCP socket programming in connection- oriented Scenario. Echo Server echo back (return back) the message sent by the client. Also, write the Client side program. While creating program focus on the use of following socket programming functions. <code>socket()</code>, sockaddr_in, <code>bind()</code>, <code>listen()</code>, <code>accept()</code>, <code>ntohs()</code>, <code>ntohl()</code>, <code>read()</code>/<code>recv()</code>, <code>write()</code>/<code>send()</code> , <code>connect()</code>.","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment2/#steps-to-be-followed","title":"Steps to be followed:","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment2/#server-side","title":"Server Side:","text":"<ul> <li>Include appropriate header files.</li> <li>Create a TCP Socket.</li> <li>Bind the address and port using bind() system call.</li> <li>Server executes listen() system call to indicate its willingness to receive connections.</li> <li>Accept the next completed connection from the client process by using an accept() system call. At this point, connection is established between client and server, and they are ready to transfer data.</li> <li>Receive a message from the Client using recv()/read() system call.</li> <li>Send the received message back(echo) to the client using send()/write() system call.</li> <li>Close the socket using close() system call.</li> </ul>"},{"location":"Thapar/Year3/COE/UCS413/Assignment2/#client-side","title":"Client Side:","text":"<ul> <li>Include appropriate header files</li> <li>Create a TCP Socket.</li> <li>Establish connection to the Server using connect() system call.</li> <li>Send and recieve messages using send() and recv() system call respectively.</li> <li>Close the socket using close() system call</li> </ul>"},{"location":"Thapar/Year3/COE/UCS413/Assignment2/#echo-server","title":"Echo Server","text":"<pre><code>/* Copyright 2024 Keys */\n**include**{: .hash} &lt;stdio.h&gt;\n**include**{: .hash} &lt;stdlib.h&gt;\n**include**{: .hash} &lt;string.h&gt;\n**include**{: .hash} &lt;unistd.h&gt;\n**include**{: .hash} &lt;sys/types.h&gt;\n**include**{: .hash} &lt;sys/socket.h&gt;\n**include**{: .hash} &lt;netinet/in.h&gt;\n\n**define**{: .hash} PORT 12345\n\nvoid error(const char *msg) {\n    perror(msg);\n    exit(1);\n}\n\nint main(int argc, char *argv[]) {\n    int sockfd, newsockfd, portno;\n    socklen_t clilen;\n    char buffer[256];\n    struct sockaddr_in serv_addr, cli_addr;\n    int n;\n\n    // Create a TCP socket\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd &lt; 0)\n        error(\"ERROR opening socket\");\n\n    // Bind the address and port\n    memset((char *) &amp;serv_addr, 0, sizeof(serv_addr));\n    portno = PORT;\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = INADDR_ANY;\n    serv_addr.sin_port = htons(portno);\n    if (bind(sockfd, (struct sockaddr *) &amp;serv_addr, sizeof(serv_addr)) &lt; 0)\n        error(\"ERROR on binding\");\n\n    // Listen for incoming connections\n    listen(sockfd, 5);\n    clilen = sizeof(cli_addr);\n\n    // Accept a connection\n    newsockfd = accept(sockfd, (struct sockaddr *) &amp;cli_addr, &amp;clilen);\n    if (newsockfd &lt; 0)\n        error(\"ERROR on accept\");\n\n    // Receive a message from the client\n    memset(buffer, 0, 256);\n    n = read(newsockfd, buffer, 255);\n    if (n &lt; 0) error(\"ERROR reading from socket\");\n    printf(\"Received: %s\\n\", buffer);\n\n    // Echo the message back to the client\n    n = write(newsockfd, buffer, strlen(buffer));\n    if (n &lt; 0) error(\"ERROR writing to socket\");\n\n    // Close the socket\n    close(newsockfd);\n    close(sockfd);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS413/Assignment2/#echo-client","title":"Echo Client","text":"<pre><code>/* Copyright 2024 Keys */\n**include**{: .hash} &lt;stdio.h&gt;\n**include**{: .hash} &lt;stdlib.h&gt;\n**include**{: .hash} &lt;unistd.h&gt;\n**include**{: .hash} &lt;string.h&gt;\n**include**{: .hash} &lt;sys/types.h&gt;\n**include**{: .hash} &lt;sys/socket.h&gt;\n**include**{: .hash} &lt;netinet/in.h&gt;\n**include**{: .hash} &lt;netdb.h&gt;\n\n**define**{: .hash} PORT 12345\n\nvoid error(const char *msg) {\n    perror(msg);\n    exit(0);\n}\n\nint main(int argc, char *argv[]) {\n    int sockfd, portno, n;\n    struct sockaddr_in serv_addr;\n    struct hostent *server;\n\n    char buffer[256];\n    if (argc &lt; 2) {\n        fprintf(stderr,\"usage %s hostname\\n\", argv[0]);\n        exit(0);\n    }\n\n    // Create a TCP socket\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd &lt; 0)\n        error(\"ERROR opening socket\");\n\n    server = gethostbyname(argv[1]);\n    if (server == NULL) {\n        fprintf(stderr,\"ERROR, no such host\\n\");\n        exit(0);\n    }\n\n    // Establish connection to the server\n    memset((char *) &amp;serv_addr, 0, sizeof(serv_addr));\n    portno = PORT;\n    serv_addr.sin_family = AF_INET;\n    memcpy((char *)&amp;serv_addr.sin_addr.s_addr, (char *)server-&gt;h_addr, server-&gt;h_length);\n    serv_addr.sin_port = htons(portno);\n    if (connect(sockfd,(struct sockaddr *) &amp;serv_addr,sizeof(serv_addr)) &lt; 0)\n        error(\"ERROR connecting\");\n\n    // Send a message to the server\n    printf(\"Please enter the message: \");\n    memset(buffer, 0, 256);\n    fgets(buffer, 255, stdin);\n    n = write(sockfd, buffer, strlen(buffer));\n    if (n &lt; 0)\n         error(\"ERROR writing to socket\");\n\n    // Receive the echo back from the server\n    memset(buffer, 0, 256);\n    n = read(sockfd, buffer, 255);\n    if (n &lt; 0)\n         error(\"ERROR reading from socket\");\n    printf(\"%s\\n\", buffer);\n\n    // Close the socket\n    close(sockfd);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS413/Assignment3/","title":"Assignment 3","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment3/#objective-create-an-echo-server-using-udp-socket-programming-in-connection-less","title":"Objective: Create an Echo-Server using UDP socket programming in connection-less.","text":"<p>Echo Server echo back (return back) the message sent by the client. Also, write the Client side program. While creating program focus on the use of following socket programming functions: <code>socket()</code>, <code>sockaddr_in</code>, <code>bind()</code>, <code>sendto()</code>, <code>recvfrom()</code>, <code>ntohs()</code>, <code>ntohl()</code>.</p>"},{"location":"Thapar/Year3/COE/UCS413/Assignment3/#steps-to-be-followed","title":"Steps to be followed:","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment3/#server-side","title":"Server Side:","text":"<ul> <li>Include appropriate header files.</li> <li>Create a UDP Socket.</li> <li>Create an address by using server\u2019s IP address and server port with <code>sockaddr_in()</code>.</li> <li>Bind the address and port using <code>bind()</code> system call.</li> <li>Receive a message from the Client using <code>recvfrom()</code> system call.</li> <li>Send the received message back(echo) to the client using sendto() system call.</li> <li>Close the socket using <code>close()</code> system call</li> </ul>"},{"location":"Thapar/Year3/COE/UCS413/Assignment3/#client-side","title":"Client Side:","text":"<ul> <li>Include appropriate header files</li> <li>Create a UDP Socket.</li> <li>Create an address by using server\u2019s IP address and server port with sockaddr_in().</li> <li>Send and receive messages using <code>sendto()</code> and <code>recvfrom()</code> system call respectively.</li> <li>Close the socket using <code>close()</code> system call</li> </ul> <p>Hint: UDP Client-Server Communication Architecture </p>"},{"location":"Thapar/Year3/COE/UCS413/Assignment3/#echo-server","title":"Echo Server","text":"<pre><code>/* Copyright 2024 Keys */\n**include**{: .hash} &lt;stdio.h&gt;\n**include**{: .hash} &lt;stdlib.h&gt;\n**include**{: .hash} &lt;string.h&gt;\n**include**{: .hash} &lt;arpa/inet.h&gt;\n**include**{: .hash} &lt;unistd.h&gt;\n\n**define**{: .hash} PORT 12345\n**define**{: .hash} BUFFER_SIZE 1024\n\nint main() {\n    int sockfd, n;\n    char buffer[BUFFER_SIZE];\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t addr_len = sizeof(client_addr);\n\n    sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n    if (sockfd &lt; 0) {\n        perror(\"Socket creation failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Fill Server information\n    memset(&amp;server_addr, 0,  sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n    server_addr.sin_port = htons(PORT);\n\n    // Bind the socket with the server address\n    if (bind(sockfd, (const struct sockaddr *)&amp;server_addr, sizeof(server_addr)) &lt; 0){\n        perror(\"Binding failed!\");\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Server is listening on %d...\\n\", PORT);\n\n    while(1) {\n        memset(buffer, 0, BUFFER_SIZE);\n        n = recvfrom(sockfd, buffer, BUFFER_SIZE, MSG_WAITALL, (struct sockaddr *)&amp;client_addr, &amp;addr_len);\n        buffer[n] = '\\0';\n        printf(\"Client: %s\\n\", buffer);\n\n        sendto(sockfd, buffer, n, MSG_CONFIRM, (const struct sockaddr *)&amp;client_addr, addr_len);\n        printf(\"Message echoed back to client.\\n\");\n    }\n\n    close(sockfd);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS413/Assignment3/#echo-client","title":"Echo Client","text":"<pre><code>/* Copyright 2024 Keys */\n**include**{: .hash} &lt;stdio.h&gt;\n**include**{: .hash} &lt;stdlib.h&gt;\n**include**{: .hash} &lt;string.h&gt;\n**include**{: .hash} &lt;arpa/inet.h&gt;\n**include**{: .hash} &lt;unistd.h&gt;\n\n**define**{: .hash} PORT 12345\n**define**{: .hash} BUFFER_SIZE 1024\n\nint main() {\n    int sockfd;\n    char buffer[BUFFER_SIZE];\n    struct sockaddr_in server_addr;\n    socklen_t addr_len = sizeof(server_addr);\n\n    sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n    if (sockfd &lt; 0) {\n        perror(\"Socket creation failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    memset(&amp;server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n\n    addr_len = sizeof(server_addr);\n\n    while(1){\n        memset(buffer, 0, BUFFER_SIZE);\n        printf(\"Enter message: \");\n        fgets(buffer, BUFFER_SIZE, stdin);\n        buffer[strlen(buffer) - 1] = '\\0';\n\n        sendto(sockfd, buffer, strlen(buffer), MSG_CONFIRM, (const struct sockaddr *)&amp;server_addr, addr_len);\n\n        memset(buffer, 0, BUFFER_SIZE);\n        recvfrom(sockfd, buffer, BUFFER_SIZE, MSG_WAITALL, (struct sockaddr *)&amp;server_addr, &amp;addr_len);\n        printf(\"Server: %s\\n\", buffer);\n    }\n\n    close(sockfd);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS413/Assignment4/","title":"Assignment 4","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment4/#objective-create-a-chat-application-using-tcp-socket-programming-in-connection-oriented-scenario","title":"Objective: Create a Chat application using TCP socket programming in connection- oriented Scenario.","text":"<p>In Chat application server and client application can chat with each other through text messages. The chat ends when server or client application sends \u201cexit\u201d message.</p>"},{"location":"Thapar/Year3/COE/UCS413/Assignment4/#steps-to-be-followed","title":"Steps to be followed:","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment4/#server-side","title":"Server Side:","text":"<ul> <li>Include appropriate header files.</li> <li>Create a TCP Socket.</li> <li>Bind the address and port using <code>bind()</code> system call.</li> <li>Server executes <code>listen()</code> system call to indicate its willingness to receive connections.</li> <li>Accept the next completed connection from the client process by using an <code>accept()</code> system call. At this point, connection is established between client and server, and they are ready to transfer data.</li> <li>Receive a message from the Client using <code>recv()</code>/<code>read()</code> system call.</li> <li>Send the received message back(echo) to the client using <code>send()</code>/<code>write()</code> system call.</li> <li>Close the socket using <code>close()</code> system call</li> </ul>"},{"location":"Thapar/Year3/COE/UCS413/Assignment4/#client-side","title":"Client Side:","text":"<ul> <li>Include appropriate header files</li> <li>Create a TCP Socket.</li> <li>Establish connection to the Server using <code>connect()</code> system call.</li> <li>Send and recieve messages using <code>send()</code> and <code>recv()</code> system call respectively.</li> <li>Close the socket using <code>close()</code> system call</li> </ul>"},{"location":"Thapar/Year3/COE/UCS413/Assignment4/#chat-server","title":"Chat Server","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n\n#define PORT 12345\n#define BUFFER_SIZE 1024\n\nvoid reverse_str(char *str) {\n    int n = strlen(str);\n    for (int i = 0; i &lt; n / 2; i++) {\n        char tmp = str[i];\n        str[i] = str[n - i - 1];\n        str[n - i - 1] = tmp;\n    }\n}\n\nint main() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[BUFFER_SIZE] = {0};\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"Socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&amp;address, sizeof(address)) &lt; 0) {\n        perror(\"Binding failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Listen for incoming connections\n    if (listen(server_fd, 3) &lt; 0) {\n        perror(\"Listen failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Accept incoming connection\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&amp;address, (socklen_t*)&amp;addrlen)) &lt; 0) {\n        perror(\"Accept failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Client Connected.\\n\");\n\n    while(1) {\n        memset(buffer, 0, BUFFER_SIZE);\n        int read_bytes = recv(new_socket, buffer, BUFFER_SIZE, 0);\n        if (read_bytes &lt;= 0) {\n            printf(\"Client disconnected.\\n\");\n            break;\n        }\n\n        buffer[strcspn(buffer, \"\\r\\n\")] = 0;\n\n        printf(\"Client: %s\\n\", buffer);\n\n        if (strncmp(buffer, \"exit\", 4) == 0) {\n            printf(\"Server exiting...\\n\");\n            break;\n        }\n\n        reverse_str(buffer);\n\n        send(new_socket, buffer, strlen(buffer), 0);\n\n        printf(\"Server: %s\\n\", buffer);\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS413/Assignment4/#chat-client","title":"Chat Client","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n\n#define PORT 12345\n#define BUFFER_SIZE 1024\n\nint main() {\n    int sock = 0;\n    struct sockaddr_in server_addr;\n    char buffer[BUFFER_SIZE] = {0};\n\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) {\n        perror(\"Socket creation failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    //\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\\\n\n    // Convert IP Addreesses to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &amp;server_addr.sin_addr) &lt;= 0) {\n        perror(\"Connection Failed\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    }\n\n    // Connect to the server\n    if (connect(sock, (struct sockaddr*)&amp;server_addr, sizeof(server_addr)) &lt; 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Connected to server\\n\");\n\n    while(1) {\n        printf(\"You: \");\n\n        fgets(buffer, BUFFER_SIZE, stdin);\n\n        // Send a message to the server\n        send(sock, buffer, strlen(buffer), 0);\n\n        if(strncmp(buffer, \"exit\", 4) == 0) {\n            printf(\"Client exiting...\\n\");\n            break;\n        }\n\n        memset(buffer, 0, BUFFER_SIZE);\n        // Recieve the message from the server\n        int read_bytes = recv(sock, buffer, BUFFER_SIZE, 0);\n        if (read_bytes &lt;= 0) {\n            printf(\"Server disconnected.\\n\");\n            break;\n        }\n\n        printf(\"Server: %s\\n\", buffer);\n    }\n\n    close(sock);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS413/Assignment5/","title":"Assignment 5","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment5/#objective-implement-chat-application-between-server-and-client-using-udp-socket-programming-in-a-connection-less-scenario","title":"Objective: Implement Chat application between server and client using UDP socket programming in a connection-less scenario.","text":"<p>In Chat application server and client application can chat with each other through text messages. The chat ends when server or client application sends \u201cexit\u201d message.</p>"},{"location":"Thapar/Year3/COE/UCS413/Assignment5/#steps","title":"Steps:","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment5/#server-side","title":"Server Side:","text":"<ul> <li>Include appropriate header files.</li> <li>Create a UDP Socket.</li> <li>Create an address by using server\u2019s IP address and server port with sockaddr_in().</li> <li>Bind the address and port using bind() system call.</li> <li>Receive a message from the Client using recvfrom() system call.</li> <li>Send the received message back(echo) to the client using sendto() system call.</li> <li>Close the socket using close() system call</li> </ul>"},{"location":"Thapar/Year3/COE/UCS413/Assignment5/#client-side","title":"Client Side:","text":"<ul> <li>Include appropriate header files</li> <li>Create a UDP Socket.</li> <li>Create an address by using server\u2019s IP address and server port with sockaddr_in().</li> <li>Send and receive messages using sendto() and recvfrom() system call respectively.</li> <li>Close the socket using close() system call</li> </ul>"},{"location":"Thapar/Year3/COE/UCS413/Assignment5/#chat-server","title":"Chat Server","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n\n#define PORT 12345\n#define BUFFER_SIZE 1024\n\nvoid reverse_str(char *str) {\n    int n = strlen(str);\n    for (int i = 0; i &lt; n / 2; i++) {\n        char tmp = str[i];\n        str[i] = str[n - i - 1];\n        str[n - i - 1] = tmp;\n    }\n}\n\nint main() {\n    int sockfd;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t addr_len = sizeof(client_addr);\n    char buffer[BUFFER_SIZE] = {0};\n    ssize_t recv_len;\n\n    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0) {\n        perror(\"Socket creation failed\");\n        exit(EXIT_FAILURE);\n    }\n\n   server_addr.sin_family = AF_INET;\n   server_addr.sin_addr.s_addr = INADDR_ANY;\n   server_addr.sin_port = htons(PORT);\n\n   // Binding Socket to address and port\n   if (bind(sockfd, (struct sockaddr *)&amp;server_addr, sizeof(server_addr))  &lt; 0) {\n       perror(\"Binding Failed\");\n       exit(EXIT_FAILURE);\n   }\n\n   printf(\"Server is listening on port %d...\\n\", PORT);\n\n   while(1) {\n       recv_len = recvfrom(sockfd, buffer, BUFFER_SIZE - 1, 0, (struct sockaddr *)&amp;client_addr, &amp;addr_len);\n       if (recv_len &lt; 0) {\n           perror(\"Failed to receive message\");\n           exit(EXIT_FAILURE);\n       }\n\n       buffer[recv_len] = '\\0';\n\n       // Print the recieved message\n       printf(\"Client: %s\\n\", buffer);\n\n       if (strcmp(buffer, \"exit\") == 0) {\n           printf(\"Server exiting...\\n\");\n           break;\n       }\n\n       reverse_str(buffer);\n\n       // Echo the message back to the client\n       if (sendto(sockfd, buffer, recv_len, 0, (struct sockaddr *)&amp;client_addr, addr_len) &lt; 0) {\n           perror(\"Failed to send message\");\n           close(sockfd);\n           exit(EXIT_FAILURE);\n       }\n   }\n\n   close(sockfd);\n   return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS413/Assignment5/#chat-client","title":"Chat Client","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n\n#define PORT 12345\n#define BUFFER_SIZE 1024\n\nint main() {\n    int sockfd;\n    char buffer[BUFFER_SIZE] = {0};\n    struct sockaddr_in server_addr;\n    socklen_t addr_len = sizeof(server_addr);\n    size_t recv_len;\n\n    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0) {\n        perror(\"Socket Creation Failed.\");\n        exit(EXIT_FAILURE);\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n    server_addr.sin_port = htons(PORT);\n\n    while(1) {\n        printf(\"Enter a message: \");\n        fgets(buffer, BUFFER_SIZE, stdin);\n        buffer[strcspn(buffer, \"\\n\")] = 0;\n\n        // Send message to server\n        if (sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr *)&amp;server_addr, addr_len) &lt; 0) {\n            perror(\"Send failed\");\n            close(sockfd);\n            exit(EXIT_FAILURE);\n        }\n\n        // Check for exit condition\n        if (strcmp(buffer, \"exit\") == 0) {\n            printf(\"Exiting...\\n\");\n            break;\n        }\n\n        // Receive response from server\n        recv_len = recvfrom(sockfd, buffer, BUFFER_SIZE - 1, 0, (struct sockaddr *)&amp;server_addr, &amp;addr_len);\n        if (recv_len &lt; 0) {\n            perror(\"Receive failed\");\n            close(sockfd);\n            exit(EXIT_FAILURE);\n        }\n\n        buffer[recv_len] = '\\0'; // Null-terminate the received string\n        printf(\"Server: %s\\n\", buffer);\n    }\n\n    close(sockfd);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS413/Assignment6/","title":"Assignment 6","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment6/#objective-wap-to-implement-broadcasting-using-connectionless-socket-programming","title":"Objective: WAP to implement broadcasting using connectionless socket programming.","text":"<p>Each network segment has a corresponding broadcast address. Take the class C network segment 192.168.1.x as an example, where the smallest address 192.168.1.0 represents the network segment; and the largest address 192.168.1.255 is the broadcast address in the network segment. When we want to send a data packet to this address, all hosts on the network segment will receive and process it.  </p> <p>Note: Broadcast packets are sent and received through UDP sockets. The broadcast packet sending process is as follows: a) Create a UDP socket; <code>socket(AF_INET, SOCK_DGRAM, 0)</code> b) Fill the broadcast information structure; <code>struct sockaddr_in</code> c) Set socket options to allow broadcast packets to be sent; <code>setsockopt(,--- ,SO_BROADCAST,-------)</code> d) Send data packet; <code>sendto()</code></p>"},{"location":"Thapar/Year3/COE/UCS413/Assignment6/#the-broadcast-packet-receiving-process-is-as-follows","title":"The broadcast packet receiving process is as follows:","text":"<p>a) Create a UDP socket; <code>socket(AF_INET, SOCK_DGRAM, 0)</code> b) Fill the broadcast information structure; <code>struct sockaddr_in</code> c) Bind address and port; <code>bind()</code> d) Receive data packet; <code>recvfrom()</code></p>"},{"location":"Thapar/Year3/COE/UCS413/Assignment6/#broadcast-sender","title":"Broadcast Sender","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;asm-generic/socket.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    int sock;\n    struct sockaddr_in server;\n    int broadcast = 1;\n    char *message = \"Hello, Broadcast\";\n\n    sock = socket(AF_INET, SOCK_DGRAM, 0);\n    if (sock &lt; 0 ) {\n        perror(\"Socket creation failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &amp;broadcast, sizeof(broadcast)) &lt; 0) {\n        perror(\"Failed to set socket option\");\n        exit(EXIT_FAILURE);\n    }\n\n    memset(&amp;server, 0, sizeof(server));\n    server.sin_family = AF_INET;\n    server.sin_addr.s_addr = inet_addr(\"192.168.1.255\");\n    server.sin_port = htons(12345);\n\n    if (sendto(sock, message, strlen(message), 0, (struct sockaddr *)&amp;server, sizeof(server)) &lt; 0) {\n        perror(\"Failed to send message\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    }\n\n    close(sock);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS413/Assignment6/#broadcast-reciever","title":"Broadcast Reciever","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;sys/socket.h&gt;\n\n#define BUFFER_SIZE 1024\n\nint main() {\n    int sock;\n    struct sockaddr_in recv_addr, cli_addr;\n    socklen_t cli_addr_len;\n    char buffer[BUFFER_SIZE];\n\n    // Create socket\n    sock = socket(AF_INET, SOCK_DGRAM, 0);\n    if (sock &lt; 0) {\n        perror(\"Socket creation failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Set up the receiver address\n    memset(&amp;recv_addr, 0, sizeof(recv_addr));\n    recv_addr.sin_family = AF_INET;\n    recv_addr.sin_port = htons(12345);\n    recv_addr.sin_addr.s_addr = INADDR_ANY;\n\n    // Bind the socket\n    if (bind(sock, (struct sockaddr*)&amp;recv_addr, sizeof(recv_addr)) &lt; 0) {\n        perror(\"Binding failed\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Receiver is listening on port 12345...\\n\");\n\n    // Receive data\n    cli_addr_len = sizeof(cli_addr);\n    ssize_t recv_len = recvfrom(sock, buffer, BUFFER_SIZE - 1, 0, (struct sockaddr *)&amp;cli_addr, &amp;cli_addr_len);\n    if (recv_len &lt; 0) {\n        perror(\"Failed to receive message\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    }\n\n    // Null-terminate and print the received message\n    buffer[recv_len] = '\\n';\n    printf(\"Received Message: %s\\n\", buffer);\n\n    // Close the socket\n    close(sock);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS413/Assignment7/","title":"Assignment 7","text":""},{"location":"Thapar/Year3/COE/UCS413/Assignment7/#objective-wap-to-implement-multicasting-using-socket-programming","title":"Objective: WAP to implement multicasting using socket programming.","text":"<p>Steps need to preform multicasting for connection-less client/server communication are:</p>"},{"location":"Thapar/Year3/COE/UCS413/Assignment7/#sequence-of-api-calls-for-sending-multicast-datagrams","title":"Sequence of API calls for sending multicast datagrams:","text":"<ol> <li>Create an <code>AF_INET</code>, <code>SOCK_DGRAM</code> type socket.</li> <li>Initialize a <code>sockaddr_in</code> structure.</li> <li>Set the <code>IP_MULTICAST_LOOP</code> socket option according to whether the sending system should receive a copy of the multicast datagrams that are transmitted.</li> <li>Set the <code>IP_MULTICAST_IF</code> socket option to define the local interface over which you want to send the multicast datagrams.</li> <li>Send the datagram.</li> </ol>"},{"location":"Thapar/Year3/COE/UCS413/Assignment7/#sequence-of-api-calls-for-receiving-multicast-datagrams","title":"Sequence of API calls for receiving multicast datagrams:","text":"<ol> <li>Create an <code>AF_INET</code>, <code>SOCK_DGRAM</code> type socket.</li> <li>Set the <code>SO_REUSEADDR</code> option to allow multiple applications to receive datagrams that are destined to the same local port number.</li> <li>Use the bind() verb to specify the local port number. Specify the IP address as INADDR_ANY in order to receive datagrams that are addressed to a multicast group.</li> <li>Use the <code>IP_ADD_MEMBERSHIP</code> socket option to join the multicast group that receives the datagrams. When joining a group, specify the class D group address along with the IP address of a local interface. The system must call the <code>IP_ADD_MEMBERSHIP</code> socket option for each local interface receiving the multicast datagrams.</li> <li>Receive the datagram.</li> </ol>"},{"location":"Thapar/Year3/COE/UCS413/Assignment7/#multicast-sender","title":"Multicast Sender","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;sys/socket.h&gt;\n\n#define MULTICAST_GROUP \"239.0.0.1\"\n#define PORT 12345\n#define BUFFER_SIZE 1024\n\nint main() {\n    int sock;\n    struct sockaddr_in multicast_addr;\n    char *message = \"Hello, Multicast\";\n    struct ip_mreq mreq;\n    int loop = 1;\n\n    if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0) {\n        perror(\"Socker Creation Failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    memset(&amp;multicast_addr, 0, sizeof(multicast_addr));\n    multicast_addr.sin_family = AF_INET;\n    multicast_addr.sin_addr.s_addr = inet_addr(MULTICAST_GROUP);\n    multicast_addr.sin_port = htons(PORT);\n\n    if (setsockopt(sock, IPPROTO_IP, IP_MULTICAST_LOOP, &amp;loop, sizeof(loop)) &lt; 0) {\n        perror(\"Unable to set socket option\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    }\n\n    struct in_addr local_interface;\n    local_interface.s_addr = INADDR_ANY;\n    if(setsockopt(sock, IPPROTO_IP, IP_MULTICAST_IF, &amp;local_interface, sizeof(local_interface)) &lt; 0) {\n        perror(\"Unable to set socket option\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    }\n\n    if(sendto(sock, message, strlen(message), 0, (struct sockaddr *)&amp;multicast_addr, sizeof(multicast_addr)) &lt; 0) {\n        perror(\"Send Failed\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    } else {\n        printf(\"Message sent to multicast group %s on port %d\\n\", MULTICAST_GROUP, PORT);\n    }\n\n    close(sock);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/COE/UCS413/Assignment7/#multicast-receiver","title":"Multicast Receiver","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;sys/socket.h&gt;\n\n#define MULTICAST_GROUP \"239.0.0.1\"\n#define PORT 12345\n#define BUFFER_SIZE 1024\n\nint main() {\n    int sock;\n    struct sockaddr_in recv_addr;\n    struct ip_mreq mreq;\n    char buffer[BUFFER_SIZE];\n    socklen_t addr_len;\n\n    if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0) {\n        perror(\"Socker Creation Failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    int reuse = 1;\n    if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &amp;reuse, sizeof(sock)) &lt; 0) {\n        perror(\"Unable to set socket option\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    }\n\n    memset(&amp;recv_addr, 0, sizeof(recv_addr));\n    recv_addr.sin_family = AF_INET;\n    recv_addr.sin_addr.s_addr = INADDR_ANY;\n    recv_addr.sin_port = htons(PORT);\n\n    if (bind(sock, (struct sockaddr*)&amp;recv_addr, sizeof(recv_addr)) &lt; 0) {\n        perror(\"Bind Failed\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    }\n\n    mreq.imr_multiaddr.s_addr = inet_addr(MULTICAST_GROUP);\n    mreq.imr_interface.s_addr = INADDR_ANY;\n    if(setsockopt(sock, IPPROTO_IP, IP_ADD_MEMBERSHIP, &amp;mreq, sizeof(mreq)) &lt; 0){\n        perror(\"Unable to set socket option\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    }\n\n    printf(\"Receiver is listening on port 12345...\\n\");\n\n    addr_len = sizeof(recv_addr);\n    ssize_t recv_len = recvfrom(sock ,buffer, BUFFER_SIZE - 1, 0, (struct sockaddr *)&amp;recv_addr, &amp;addr_len);\n    if (recv_len &lt; 0) {\n        perror(\"Receive Failed\");\n        close(sock);\n        exit(EXIT_FAILURE);\n    }\n\n    buffer[recv_len] = '\\0';\n    printf(\"Received: %s\\n\", buffer);\n\n    close(sock);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/ENC/UNC303/","title":"OS","text":"<ol> <li>Assignment 1</li> <li>Assignment 2</li> <li>Assignment 3</li> <li>Assignment 4</li> <li>Assignment 5</li> <li>Assignemnt 6</li> <li>Assignemnt 7</li> <li>Assignemnt 8</li> <li>Assignemnt 9</li> <li>Assignment 10</li> <li>Assignment 11</li> </ol>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment1/","title":"Assignment 1","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment1/#q1-introduction-to-various-linux-operating-systems-and-basic-commands","title":"Q1. Introduction to Various Linux Operating Systems and Basic Commands","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment1/#various-linux-distributions","title":"Various Linux Distributions","text":"<p>Linux is an open-source operating system that is widely used for a variety of purposes, including servers, desktops, and embedded systems. It is known for its stability, security, and flexibility. Here are some popular Linux distributions:</p> Distribution Use Case Description Ubuntu Desktop, server, and cloud computing Ubuntu is one of the most popular Linux distributions, especially for beginners. It is user-friendly and has a large community for support. Fedora Desktop, development, and servers Fedora is a cutting-edge Linux distribution that offers the latest software and features. It is the upstream source for Red Hat Enterprise Linux (RHEL). Debian Server, desktop, and embedded Debian is a highly stable and reliable distribution. It is the foundation for many others, including Ubuntu. Debian focuses on free software and quality. CentOS Server environments CentOS was compatible with Red Hat Enterprise Linux (RHEL) and widely used in enterprise environments for stability and security. Now CentOS Stream. Arch Linux Advanced users, customization Arch Linux is a lightweight and flexible distribution that follows a rolling-release model. It is highly customizable and suited for experienced users. AlmaLinux Server environments AlmaLinux is a community-driven replacement for CentOS, aiming to be a stable, production-grade operating system. Kali Linux Security testing Kali Linux is a Debian-based distribution designed for digital forensics and penetration testing, with numerous pre-installed security auditing tools."},{"location":"Thapar/Year3/ENC/UNC303/Assignment1/#basic-linux-commands","title":"Basic Linux Commands","text":"Command Description Example <code>pwd</code> Displays the current directory. <code>pwd</code> <code>ls</code> Lists files and directories. Options: <code>-l</code> for detailed list, <code>-a</code> to show hidden files. <code>ls</code>, <code>ls -la</code> <code>cd</code> Changes the current directory. <code>cd /home/username/Documents</code> <code>mkdir</code> Creates a new directory. <code>mkdir new_directory</code> <code>rmdir</code> Removes an empty directory. <code>rmdir new_directory</code> <code>rm</code> Deletes files or directories. Option: <code>-r</code> to remove directories and their contents recursively. <code>rm file.txt</code>, <code>rm -r directory/</code> <code>cp</code> Copies files or directories. Option: <code>-r</code> to copy directories recursively. <code>cp source.txt destination.txt</code> <code>mv</code> Moves or renames files or directories. <code>mv old_name.txt new_name.txt</code> <code>cat</code> Displays the contents of a file. <code>cat file.txt</code> <code>nano</code>/<code>vim</code> Edits files directly from the command line. <code>nano file.txt</code>, <code>vim file.txt</code> <code>chmod</code> Changes the permissions of a file or directory. Example: <code>755</code> gives the owner full permissions, others can read/execute. <code>chmod 755 script.sh</code> <code>chown</code> Changes the owner of a file or directory. <code>chown username:groupname file.txt</code> <code>df</code> Displays the amount of disk space available on the file system. Option: <code>-h</code> for human-readable format. <code>df -h</code> <code>du</code> Estimates and displays the disk space used by files and directories. Option: <code>-h</code> for human-readable format. <code>du -h /home/username/</code> <code>mount</code> Mounts a file system or device to a specified directory. <code>mount /dev/sda1 /mnt</code> <code>umount</code> Unmounts a file system or device. <code>umount /mnt</code> <code>fsck</code> Checks and repairs a Linux file system. Must be run with <code>sudo</code>. <code>sudo fsck /dev/sda1</code> <code>mkfs</code> Creates a new file system on a device. Example: <code>mkfs.ext4</code> for an ext4 file system. <code>mkfs.ext4 /dev/sda1</code> <code>blkid</code> Displays information about block devices, including their UUID and file system type. <code>blkid /dev/sda1</code> <code>ln</code> Creates a hard or symbolic link to a file. Option: <code>-s</code> for symbolic (soft) link. <code>ln -s /path/to/file /path/to/link</code> <code>top</code> Displays real-time information about running processes. <code>top</code> <code>ps</code> Displays information about active processes. <code>ps aux</code> <code>kill</code> Terminates a process by its PID (Process ID). <code>kill 1234</code> <code>grep</code> Searches for specific text patterns in files. <code>grep \"pattern\" file.txt</code> <code>find</code> Searches for files and directories based on criteria. <code>find /home -name \"file.txt\"</code> <code>tar</code> Archives files into a tarball or extracts them. Option: <code>-xvf</code> to extract files from an archive. <code>tar -cvf archive.tar directory/</code> <code>sudo</code> Executes a command with superuser (root) privileges. <code>sudo apt-get update</code>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment10/","title":"Assignment 10","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment11/","title":"Assignment 11","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/","title":"Assignment 2","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#q1-introduction-to-the-linux-file-system-and-related-commands","title":"Q1. Introduction to the Linux File System and Related Commands","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#linux-file-system","title":"Linux File System","text":"<p>Hierarchy</p> Directory Purpose <code>/</code> The root directory; the top level of the file system. <code>/bin</code> Essential command binaries needed for system repair and operation in single-user mode. <code>/boot</code> Files related to the bootloader, including the Linux kernel and boot configuration. <code>/dev</code> Device files representing hardware components and peripherals. <code>/etc</code> Configuration files for the system and various software packages. <code>/home</code> User's personal directories, where each user has a subdirectory. <code>/lib</code> Essential shared libraries and kernel modules. <code>/media</code> Mount points for removable media such as USB drives and CDs. <code>/mnt</code> Temporary mount points for file systems. <code>/opt</code> Optional application software packages. <code>/proc</code> Virtual file system providing process and system information. <code>/root</code> The home directory of the root user. <code>/sbin</code> System binaries essential for booting and system repair, typically used by the root user. <code>/srv</code> Data for services provided by the system, like web servers. <code>/tmp</code> Temporary files used by the system and applications. <code>/usr</code> Secondary hierarchy for user-related programs and data. <code>/var</code> Variable data files, such as logs, mail spools, and databases."},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#commands","title":"Commands","text":"Command Description Example <code>pwd</code> Displays the current directory. <code>pwd</code> <code>ls</code> Lists files and directories. Options: <code>-l</code> for detailed list, <code>-a</code> to show hidden files. <code>ls</code>, <code>ls -la</code> <code>cd</code> Changes the current directory. <code>cd /home/username/Documents</code> <code>mkdir</code> Creates a new directory. <code>mkdir new_directory</code> <code>rmdir</code> Removes an empty directory. <code>rmdir new_directory</code> <code>rm</code> Deletes files or directories. Option: <code>-r</code> to remove directories and their contents recursively. <code>rm file.txt</code>, <code>rm -r directory/</code> <code>cp</code> Copies files or directories. Option: <code>-r</code> to copy directories recursively. <code>cp source.txt destination.txt</code> <code>mv</code> Moves or renames files or directories. <code>mv old_name.txt new_name.txt</code> <code>chmod</code> Changes the permissions of a file or directory. Example: <code>755</code> gives the owner full permissions, others can read/execute. <code>chmod 755 script.sh</code> <code>chown</code> Changes the owner of a file or directory. <code>chown username:groupname file.txt</code> <code>df</code> Displays the amount of disk space available on the file system. Option: <code>-h</code> for human-readable format. <code>df -h</code> <code>du</code> Estimates and displays the disk space used by files and directories. Option: <code>-h</code> for human-readable format. <code>du -h /home/username/</code> <code>mount</code> Mounts a file system or device to a specified directory. <code>mount /dev/sda1 /mnt</code> <code>umount</code> Unmounts a file system or device. <code>umount /mnt</code> <code>fsck</code> Checks and repairs a Linux file system. Must be run with <code>sudo</code>. <code>sudo fsck /dev/sda1</code> <code>mkfs</code> Creates a new file system on a device. Example: <code>mkfs.ext4</code> for an ext4 file system. <code>mkfs.ext4 /dev/sda1</code> <code>blkid</code> Displays information about block devices, including their UUID and file system type. <code>blkid /dev/sda1</code> <code>ln</code> Creates a hard or symbolic link to a file. Option: <code>-s</code> for symbolic (soft) link. <code>ln -s /path/to/file /path/to/link</code>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#q2-introduction-to-vim-editor-and-shell-scripting-basics","title":"Q2. Introduction to Vim editor and Shell Scripting basics","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#what-is-vim","title":"What is Vim?","text":"<p>Vim is a highly configurable text editor that is an improved version of the older vi editor. It's widely used for programming and general text editing, especially on Unix-like systems.</p>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#why-use-vim","title":"Why Use Vim?","text":"<ul> <li>Efficiency: Vim is designed for speed and efficiency, allowing you to perform text editing tasks with minimal keystrokes.</li> <li>Modal Editing: Vim uses different modes for inserting text, navigating, and performing commands, which reduces the need for using the mouse or arrow keys.</li> <li>Customization: Vim is highly customizable, supporting plugins, scripts, and personalized key mappings.</li> </ul>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#basic-vim-modes","title":"Basic Vim Modes","text":"Mode Purpose Normal The default mode for navigating and manipulating text. Insert Activated by pressing i, a, o, etc., for inserting text. Visual Activated by pressing v, used for selecting text. Command Accessed from Normal Mode by typing : to execute commands like saving, quitting, etc."},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#basic-commands","title":"Basic Commands","text":"Category Command Description Navigation <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code> Move left, down, up, right respectively. <code>gg</code> Go to the beginning of the file. <code>G</code> Go to the end of the file. Editing <code>i</code> Enter Insert Mode before the cursor. <code>x</code> Delete the character under the cursor. <code>dd</code> Delete the current line. <code>u</code> Undo the last action. Saving and Quitting <code>:w</code> Save the file. <code>:q</code> Quit Vim. <code>:wq</code> Save and quit. <code>:q!</code> Quit without saving."},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#introduction-to-shell-scripting","title":"Introduction to Shell Scripting","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#what-is-a-shell-script","title":"What is a Shell Script?","text":"<p>A shell script is a text file that contains a series of commands for a Unix-based operating system's shell (like Bash) to execute. Shell scripts are used to automate tasks, simplify complex operations, and manage system administration.</p>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#why-use-shell-scripting","title":"Why Use Shell Scripting?","text":"<ul> <li>Automation: Repetitive tasks can be automated, saving time and reducing errors.</li> <li>System Administration: Shell scripts are widely used for system maintenance, backups, user management, and more.</li> <li>Integration: Shell scripts can easily integrate different programs and utilities within a Unix-based system.</li> </ul>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#basic-shell-script-structure","title":"Basic Shell Script Structure","text":"<pre><code>#!/bin/bash\n# This is a comment\necho \"Hello, World!\" # This prints Hello, World!\n</code></pre> <ul> <li><code>#!/bin/bash</code>: Shebang line indicating the script should be run in the Bash shell.</li> <li><code>echo \"Hello, World!\"</code>: Command to print text to the terminal.</li> </ul>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#common-commands","title":"Common Commands","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#variables","title":"Variables:","text":"<pre><code>#!/bin/bash\nNAME=\"John\"\necho \"Hello, $NAME\"\n</code></pre>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#conditional-statements","title":"Conditional Statements:","text":"<pre><code>#!/bin/bash\n# `if-elif-else`\nif [ \"$NAME\" == \"John\" ]; then\n    echo \"Welcome, John!\"\nelif [ \"$NAME\" == \"Jane\" ]; then\n    echo \"Welcome, Jane!\"\nelse\n    echo \"Who are you?\"\nfi\n\n# `case`\n#!/bin/bash\n\ncase \"$1\" in\n  \"start\")\n    echo \"Starting the process...\"\n    ;;\n  \"stop\")\n    echo \"Stopping the process...\"\n    ;;\n  \"restart\")\n    echo \"Restarting the process...\"\n    ;;\n  *)\n    echo \"Unknown command: $1\"\n    ;;\nesac\n</code></pre>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#loops","title":"Loops:","text":"<pre><code>#!/bin/bash\n# For loop\nfor i in 1 2 3; do\n    echo \"Number $i\"\ndone\n\n# While loop\nwhile [ $i -le 5 ]; do\n    echo \"Number $i\"\n    i=$((i+1))\ndone\n\n# Until loop\nuntil [ $i -le 0 ]; do\n    echo \"Number $i\"\n    i=$((i-1))\ndone\n</code></pre>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#functions","title":"Functions:","text":"<pre><code>#!/bin/bash\nmy_function() {\n    echo \"This is a function\"\n}\nmy_function\n</code></pre>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#running-a-shell-script","title":"Running a Shell Script","text":"<ol> <li>Create a file: <code>touch script.sh</code></li> <li>Make it executable: <code>chmod +x script.sh</code></li> <li>Run the script: <code>./script.sh</code></li> </ol>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#q3-execution-of-simple-c-programs-using-gcc-and-passing-of-command-line-arguments","title":"Q3. Execution of simple C programs using GCC and passing of Command line arguments","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc &lt; 2) {\n        printf(\"No arguments provided.\\n\");\n        return 1;\n    }\n\n    printf(\"Number of arguments: %d\\n\", argc);\n    printf(\"Arguments passed:\\n\");\n\n    for (int i = 0; i &lt; argc; ++i) {\n        printf(\"argv[%d]: %s\\n\", i, argv[i]);\n    }\n\n    return 0;\n}\n</code></pre> <p>To run the above program:  &gt; <code>gcc -o myprogram myprogram.c &amp;&amp; ./myprogram hello word 123</code></p>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#q4-implementation-of-file-system-calls","title":"Q4. Implementation of File System calls:","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#a-write-a-program-to-open-an-existing-file-read-its-contents-and-display-them-on-the-console","title":"(a) Write a program to open an existing file, read its contents, and display them on the console.","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s &lt;filename&gt;\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *file = fopen(argv[1], \"r\");\n    if (file == NULL) {\n        perror(\"Error opening file.\");\n        return 1;\n    }\n\n    char ch;\n    while (ch = fgetc(file) != EOF) {\n        putchar(ch);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#b-write-a-program-to-copy-a-file-specified-by-the-user-at-runtime-use-command-line-arguments-to-specify-the-source-and-destination-file-names","title":"(b) Write a program to copy a file specified by the user at runtime. Use command-line arguments to specify the source and destination file names.","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 3) {\n        fprintf(stderr, \"Usage: %s &lt;source&gt; &lt;destination&gt;\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *source = fopen(argv[1], \"rb\");\n    if (source == NULL) {\n        perror(\"Error opening source file.\");\n        return 1;\n    }\n\n    FILE *destination = fopen(argv[2], \"wb\");\n    if (destination == NULL) {\n        perror(\"Error opening destination file.\");\n        fclose(source);\n        return 1;\n    }\n\n    char buffer[1024];\n    size_t bytes_read;\n    while ((bytes_read = fread(buffer, 1, sizeof(buffer), source)) &gt; 0) {\n        fwrite(buffer, 1, sizeof(buffer), destination);\n    }\n\n    fclose(source);\n    fclose(destination);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#c-write-a-program-to-create-a-new-file-write-a-user-specified-string-into-it-and-then-read-the-contents-of-the-file-and-display-them","title":"(c\u200b) Write a program to create a new file, write a user-specified string into it, and then read the contents of the file and display them.","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n    char filename[100];\n    char content[256];\n\n    printf(\"Enter Filename: \");\n    scanf(\"%99s\", filename);\n\n    printf(\"Enter Content: \");\n    scanf(\"%255[^\\n]\", content);\n\n    FILE *file = fopen(filename, \"w\");\n    if (file == NULL) {\n        perror(\"Error creating file.\");\n        return 1;\n    }\n    fprintf(file, \"%s\\n\", content);\n    fclose(file);\n\n    file = fopen(filename, \"r\");\n    if (file == NULL) {\n        perror(\"Error opening file.\");\n        return 1;\n    }\n\n    printf(\"Contents of %s: \\n\", filename);\n    while (fgets(content, sizeof(content), file)) {\n        printf(\"%s\", content);\n    }\n\n    fclose(file);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#d-write-a-program-to-open-a-file-count-the-number-of-words-in-the-file-and-display-the-count","title":"(d) Write a program to open a file, count the number of words in the file, and display the count.","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;ctype.h&gt;\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s &lt;filename&gt;\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *file = fopen(argv[1], \"r\");\n    if (file == NULL) {\n        perror(\"Error opening file.\");\n        return 1;\n    }\n\n    int c, prev = ' ', word_count = 0;\n    while ((c = fgetc(file)) != EOF) {\n        if (isspace(c) &amp;&amp; !isspace(prev)) {\n            word_count++;\n        }\n        prev = c;\n    }\n    if (!isspace(prev)) {\n        word_count++;\n    }\n    fclose(file);\n    printf(\"Number of words in %s: %d\\n\", argv[1], word_count);\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment2/#e-write-a-program-to-implement-a-simple-file-encryption-and-decryption-system-use-simple-xor-encryption-for-the-purpose-of-this-assignment","title":"(e) Write a program to implement a simple file encryption and decryption system. Use simple XOR encryption for the purpose of this assignment.","text":"<pre><code>/* Copyright 2024 Keys */\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nvoid xor_encrypt(FILE *input, FILE *output, char *key) {\n    int c;\n    while ((c = fgetc(input)) != EOF) {\n        fputc(c ^ *key, output);\n    }\n}\n\nvoid xor_decrypt(FILE *input, FILE *output, char *key) {\n    xor_encrypt(input, output, key);  // XOR is symmetric, so encryption and decryption\n}\n\nint main(int argc, char *argv[]) {\n    if (argc != 4) {\n        fprintf(stderr, \"Usage: %s &lt;mode&gt; &lt;filename&gt; &lt;key&gt;\\n\", argv[0]);\n        fprintf(stderr, \"Modes: encrypt or decrypt\\n\");\n        return 1;\n    }\n\n    const char *mode = argv[1];\n    const char *filename = argv[2];\n    char *key = argv[3];\n\n    FILE *input_file = fopen(filename, \"rb\");\n    if (input_file == NULL) {\n        perror(\"Error opening input file\");\n        return 1;\n    }\n\n    char output_filename[256];\n    if (strcmp(mode, \"encrypt\") == 0) {\n        snprintf(output_filename, sizeof(output_filename), \"%s.enc\", filename);\n    } else if (strcmp(mode, \"decrypt\") == 0) {\n        snprintf(output_filename, sizeof(output_filename), \"%s.dec\", filename);\n    } else {\n        fprintf(stderr, \"Invalid mode: %s\\n\", mode);\n        fclose(input_file);\n        return 1;\n    }\n\n    FILE *output_file = fopen(output_filename, \"wb\");\n    if (output_file == NULL) {\n        perror(\"Error opening output file\");\n        fclose(input_file);\n        return 1;\n    }\n\n    if (strcmp(mode, \"encrypt\") == 0) {\n        xor_encrypt(input_file, output_file, key);\n    } else {\n        xor_decrypt(input_file, output_file, key);\n    }\n\n    fclose(input_file);\n    fclose(output_file);\n\n    printf(\"Operation %s completed successfully, Output file: %s\\n\", mode, output_filename);\n\n    return 0;\n}\n</code></pre>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment3/","title":"Assignment 3","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment3/#q1-file-descriptor-duplication-using-dup","title":"Q1. File Descriptor Duplication Using <code>dup()</code>","text":"<p>Write a program that opens a file, duplicates its file descriptor using <code>dup()</code>, writes to both the original and duplicated file descriptors, and then verifies the contents of the file.</p> <p>Hint: Use <code>open()</code>, <code>dup()</code>, <code>write()</code>, and <code>close()</code> system calls. <pre><code>/* Copyright 2024 Keys */\n#include&lt;stdio.h&gt;\n#include&lt;fcntl.h&gt;\n#include&lt;unistd.h&gt;\n\nint main() {\n    int fd = open(\"file.txt\", O_WRONLY | O_CREAT, O_TRUNC, 0644);\n    if (fd &lt; 0) {\n        perror(\"open\");\n        return 1;\n    }\n\n    int fd_dup = dup(fd);\n    if (fd_dup &lt; 0) {\n        perror(\"dup\");\n        close(fd);\n        return 1;\n    }\n\n    write(fd, \"Hello, \", 7);\n    write(fd_dup, \"World!\\n\", 7);\n    close(fd);\n    close(fd_dup);\n    return 0;\n}\n</code></pre></p>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment3/#q2-file-descriptor-redirection-using-dup2","title":"Q2. File Descriptor Redirection Using dup2()","text":"<p>Write a program that opens a file, redirects stdout to this file using <code>dup2()</code>, and then prints a message to stdout. Verify that the message is written to the file.</p> <p>Hint: Use <code>open()</code>, <code>dup2()</code>, <code>printf()</code>, and <code>close()</code> system calls. <pre><code>/* Copyright 2024 Keys */\n#include&lt;stdio.h&gt;\n#include&lt;fcntl.h&gt;\n#include&lt;unistd.h&gt;\n\nint main() {\n    int fd = open(\"file.txt\", O_WRONLY | O_CREAT, O_TRUNC, 0644);\n    if (fd &lt; 0) {\n        perror(\"open\");\n        return 1;\n    }\n\n    if (dup2(fd, STDOUT_FILENO) &lt; 0) {\n        perror(\"dup2\");\n        close(fd);\n        return 1;\n    }\n\n    printf(\"This message is written to the file instead of stdout.\\n\");\n\n    close(fd);\n    return 0;\n}\n</code></pre></p>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment3/#q3-creating-hard-links-using-link","title":"Q3. Creating Hard Links Using link()","text":"<p>Write a program that creates a hard link to an existing file, verifies the creation by checking the inode numbers of both files, and prints a confirmation message.</p> <p>Hint: Use <code>link()</code>, <code>stat()</code>, and <code>printf()</code> system calls. <pre><code>/* Copyright 2024 Keys */\n#include&lt;stdio.h&gt;\n#include&lt;fcntl.h&gt;\n#include&lt;unistd.h&gt;\n#include&lt;sys/stat.h&gt;\n\nint main() {\n    if (link(\"orignal.txt\", \"hardlink.txt\") &lt; 0) {\n        perror(\"link\");\n        return 1;\n    }\n\n    struct stat statbuf;\n    if (stat(\"orignal.txt\", &amp;statbuf) == 0)\n        printf(\"Orignal file: inode: %lu\\n\", statbuf.st_ino);\n\n    if (stat(\"hardlink.txt\", &amp;statbuf) == 0)\n        printf(\"Hard Link inode: %lu\\n\", statbuf.st_ino);\n    return 0;\n}\n</code></pre></p>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment3/#q4-deleting-files-using-unlink","title":"Q4. Deleting Files Using unlink()","text":"<p>Write a program that creates a temporary file, deletes it using unlink(), and verifies the deletion by attempting to open the file again and checking for an error. </p> <p>Hint: Use <code>open()</code>, <code>unlink()</code>, and <code>open()</code> system calls. <pre><code>/* Copyright 2024 Keys */\n#include&lt;stdio.h&gt;\n#include&lt;fcntl.h&gt;\n#include&lt;unistd.h&gt;\n\nint main() {\n    int fd = open(\"file.txt\", O_WRONLY | O_CREAT, 0644);\n    if (fd &lt; 0) {\n        perror(\"open\");\n        return 1;\n    }\n\n    close(fd);\n\n    if (unlink(\"tmpfile.txt\") &lt; 0) {\n        perror(\"unlink\");\n        return 1;\n    }\n\n    if (open(\"tmpfile.txt\", O_RDONLY) &lt; 0) perror(\"File deleted Successfully\");\n    else printf(\"File still exists\");\n\n    return 0;\n}\n</code></pre></p>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment4/","title":"Assignment 4","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment4/#q1-create-and-verify-a-directory","title":"Q1. Create and Verify a Directory","text":"<p>Write a program that creates a directory named <code>test_dir</code>, changes the current working directory to <code>test_dir</code>, and verifies the change.</p> <p>Hint: Use <code>mkdir()</code>, <code>chdir()</code>, and <code>getcwd()</code> system calls. <pre><code>/* Copyright 2024 Keys */\n#include &lt;linux/limits.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;errno.h&gt;\n\nint main() {\n    const char *dir_name = \"test_dir\";\n    char cwd[PATH_MAX];\n\n    /* Create Directory */\n    if (mkdir(dir_name, 0777) == -1) {\n        if (errno == EEXIST) {\n            printf(\"Directory already exists.\\n\");\n        } else {\n            perror(\"mkdir\");\n            return 1;\n        }\n    } else {\n        printf(\"Directory %s created successfully.\\n\", dir_name);\n    }\n\n    /* Change to new directory */\n    if (chdir(dir_name) == -1) {\n        perror(\"chdir\");\n        return 1;\n    } else {\n        printf(\"Changed to directory %s.\\n\", dir_name);\n    }\n\n    /* Verify the change by print the current working directory */\n    if (getcwd(cwd, sizeof(cwd)) != NULL) {\n        printf(\"Current working directory: %s\\n\", cwd);\n    } else {\n        perror(\"getcwd\");\n        return 1;\n    }\n}\n</code></pre></p>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment4/#q2-remove-a-directory-and-verify","title":"Q2. Remove a Directory and Verify","text":"<p>Write a program that creates a directory named <code>delete_me</code>, lists the contents of the current directory, removes the <code>delete_me</code> directory, and lists the contents again to verify removal.</p> <p>Hint: Use <code>mkdir()</code>, <code>rmdir()</code>, <code>opendir()</code>, <code>readdir()</code>, and <code>closedir()</code> system calls. <pre><code>\n</code></pre></p>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment4/#q3-directory-traversal","title":"Q3. Directory Traversal","text":"<p>Write a program that recursively lists all files and directories starting from the current directory.</p> <p>Hint: Use a combination of <code>opendir()</code>, <code>readdir()</code>, and recursion to traverse directories <pre><code>\n</code></pre></p>"},{"location":"Thapar/Year3/ENC/UNC303/Assignment5/","title":"Assignment 5","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment6/","title":"Assignment 6","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment7/","title":"Assignment 7","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment8/","title":"Assignment 8","text":""},{"location":"Thapar/Year3/ENC/UNC303/Assignment9/","title":"Assignment 9","text":""}]}